From 1907c61b792d688f1e45145e40a2113ce681f231 Mon Sep 17 00:00:00 2001
From: Hardik Shah <hardik.shah@ti.com>
Date: Thu, 5 Apr 2012 18:43:23 +0530
Subject: [PATCH 2/5] TI81xx Video Proxy: Same containers are used for Queue and Dequeu calls.

IR#SDOCM00091147 solved:

Description
We need to send the command structure filled with proper commands
from A8 to M3 for every operation that is required to be done by M3.
This is sent through Notify. Now we use same structure instance to
send command from A8 to M3 per driver instance like V4L2 capture
driver will use one structure instance per driver node like /dev/video0.
Now what happens that if application is having threads for doing queue and
dequeue and they run independently. So when queue is going on and A8 has
filled structure and sent to M3. Application can call dequeu and A8 will
overwrite the structure with dequeue commands before M3 reads. So this needs
to be protected. Or alteast there should be separate command structure for
each calls which can be threaded.

Futher same thing can happen when only qbuf is called from 2 differnt threads.
So to solve that we have to serialize qbufs from different threads and dqbuf
also. So we have to use separate mutexes in qbuf and dqbuf.

Temp1

Signed-off-by: Hardik Shah <hardik.shah@ti.com>
---
 linux-2.6.37-psp04.04.00.01/drivers/media/video/ti81xx/ti81xxvid_main.c |   18 +++++--
 linux-2.6.37-psp04.04.00.01/drivers/media/video/ti81xx/ti81xxvin_main.c |   76 +++++++++++++++------------
 linux-2.6.37-psp04.04.00.01/drivers/media/video/ti81xx/ti81xxvin_pvt.h  |    3 +
 linux-2.6.37-psp04.04.00.01/drivers/video/ti81xx/vpss/fvid2.c           |   72 +++++++++++++++++--------
 4 files changed, 106 insertions(+), 63 deletions(-)

diff --git a/linux-2.6.37-psp04.04.00.01/drivers/media/video/ti81xx/ti81xxvid_main.c b/linux-2.6.37-psp04.04.00.01/drivers/media/video/ti81xx/ti81xxvid_main.c
index e5cdf15..bde6254 100644
--- a/linux-2.6.37-psp04.04.00.01/drivers/media/video/ti81xx/ti81xxvid_main.c
+++ b/linux-2.6.37-psp04.04.00.01/drivers/media/video/ti81xx/ti81xxvid_main.c
@@ -1092,6 +1092,7 @@ static int ti81xx_vidout_vrelease(struct file *file)
 		return 0;
 	}
 	q = &vout->vbq;
+	mutex_lock(&vout->lock);
 	if (vout->streaming)
 		ret = vctrl->stop(vctrl);
 
@@ -1133,6 +1134,7 @@ static int ti81xx_vidout_vrelease(struct file *file)
 		" vidout%d\n",
 		 __func__, vout->vid);
 	kfree(file->private_data);
+	mutex_unlock(&vout->lock);
 	return ret;
 }
 
@@ -1189,7 +1191,7 @@ static int ti81xx_vidout_vopen(struct file *file)
 
 	videobuf_queue_dma_contig_init(q, &video_vbq_ops, q->dev,
 			&vout->vbq_lock, vout->type, V4L2_FIELD_NONE,
-			sizeof(struct videobuf_buffer), vout, NULL);
+			sizeof(struct videobuf_buffer), vout, &vout->lock);
 
 	v4l2_dbg(1, debug, &vout->vid_dev->v4l2_dev, "Exiting %s for"
 		" VIDOUT%d\n",
@@ -1806,8 +1808,9 @@ static int vidioc_querybuf(struct file *file, void *priv,
 	v4l2_dbg(1, debug, &vout->vid_dev->v4l2_dev,
 		"VIDOUT%d: query buffer\n",
 		vout->vid);
-
+	mutex_lock(&vout->lock);
 	return videobuf_querybuf(&vout->vbq, b);
+	mutex_unlock(&vout->lock);
 }
 
 static int vidioc_qbuf(struct file *file, void *priv,
@@ -1835,7 +1838,7 @@ static int vidioc_qbuf(struct file *file, void *priv,
 			return -EINVAL;
 		}
 	}
-
+	mutex_lock(&vout->lock);
 	r = videobuf_qbuf(q, buffer);
 	if (vout->streaming) {
 		struct videobuf_buffer *buf;
@@ -1847,8 +1850,10 @@ static int vidioc_qbuf(struct file *file, void *priv,
 						scalar_prms.scalar_enable) {
 			addr = (unsigned long) vout->queued_buf_addr[buf->i];
 		} else {
-			if (ti81xx_vidout_calculate_offset(vout))
+			if (ti81xx_vidout_calculate_offset(vout)) {
+				mutex_unlock(&vout->lock);
 				return -EINVAL;
+			}
 
 			addr = (unsigned long) vout->queued_buf_addr[buf->i]
 				+ vout->cropped_offset;
@@ -1862,6 +1867,7 @@ static int vidioc_qbuf(struct file *file, void *priv,
 			vout->vid, buffer->index, buf->i,
 			addr);
 	}
+	mutex_unlock(&vout->lock);
 	return r;
 
 }
@@ -1874,11 +1880,12 @@ static int vidioc_dqbuf(struct file *file, void *priv, struct v4l2_buffer *b)
 	struct videobuf_queue *q = &vout->vbq;
 	struct vps_video_ctrl *vctrl = vout->vctrl;
 
+	mutex_lock(&vout->lock);
 	if (!vout->streaming) {
 		v4l2_err(&vout->vid_dev->v4l2_dev,
 			"VIDOUT%d: invalid dequeue\n",
 			vout->vid);
-
+		mutex_unlock(&vout->lock);
 		return -EINVAL;
 	}
 
@@ -1896,6 +1903,7 @@ static int vidioc_dqbuf(struct file *file, void *priv, struct v4l2_buffer *b)
 
 		r = vctrl->dequeue(vctrl);
 	}
+	mutex_unlock(&vout->lock);
 	return r;
 }
 
diff --git a/linux-2.6.37-psp04.04.00.01/drivers/media/video/ti81xx/ti81xxvin_main.c b/linux-2.6.37-psp04.04.00.01/drivers/media/video/ti81xx/ti81xxvin_main.c
index 14d81ff..6669d84 100644
--- a/linux-2.6.37-psp04.04.00.01/drivers/media/video/ti81xx/ti81xxvin_main.c
+++ b/linux-2.6.37-psp04.04.00.01/drivers/media/video/ti81xx/ti81xxvin_main.c
@@ -927,7 +927,7 @@ static int ti81xxvin_vps_stop(struct ti81xxvin_instance_obj *inst)
 	ret = (inst->captctrl->stop(inst->captctrl));
 	return ret;
 }
-
+/* This function is protected under mutex */
 static int ti81xxvin_hdvpss_stop(struct ti81xxvin_instance_obj *inst)
 {
 	struct videobuf_buffer *buf;
@@ -1595,8 +1595,8 @@ static int vidioc_reqbufs(struct file *file, void *priv,
 		return -EINVAL;
 
 	buf_obj = &inst->buf_obj;
-	if (mutex_lock_interruptible(&buf_obj->buf_lock))
-		return -ERESTARTSYS;
+	mutex_lock(&buf_obj->buf_lock);
+
 	if (0 != buf_obj->io_usrs) {
 		ret = -EBUSY;
 		goto reqbuf_exit;
@@ -1609,7 +1609,7 @@ static int vidioc_reqbufs(struct file *file, void *priv,
 			reqbuf->type,
 			buf_obj->fmt.fmt.pix.field,
 			sizeof(struct videobuf_buffer), fh,
-			NULL);
+			&buf_obj->buf_lock);
 
 	/* Set io allowed member of file handle to TRUE */
 	fh->io_allowed = 1;
@@ -1640,7 +1640,9 @@ static int vidioc_querybuf(struct file *file, void *priv,
 	struct ti81xxvin_fh *fh = priv;
 	struct ti81xxvin_instance_obj *inst = fh->instance;
 	struct ti81xxvin_buffer_obj *buf_obj = &inst->buf_obj;
+	int r;
 
+	mutex_lock(&buf_obj->buf_lock);
 	ti81xxvin_dbg(2, debug, "vidioc_querybuf\n");
 
 	if (buf_obj->fmt.type != buf->type)
@@ -1650,8 +1652,9 @@ static int vidioc_querybuf(struct file *file, void *priv,
 		ti81xxvin_dbg(1, debug, "Invalid memory\n");
 		return -EINVAL;
 	}
-
-	return videobuf_querybuf(&buf_obj->buffer_queue, buf);
+	r = videobuf_querybuf(&buf_obj->buffer_queue, buf);
+	mutex_unlock(&buf_obj->buf_lock);
+	return r;
 }
 
 /**
@@ -1670,16 +1673,20 @@ static int vidioc_qbuf(struct file *file, void *priv, struct v4l2_buffer *buf)
 	u32 addr, offset;
 	int ret = 0;
 
-	ti81xxvin_dbg(2, debug, "vidioc_qbuf\n");
 
 	if (buf_obj->fmt.type != tbuf.type) {
 		ti81xxvin_err("invalid buffer type\n");
-		return -EINVAL;
+		ret =  -EINVAL;
+		goto qbuf_exit;
 	}
 	if (!fh->io_allowed) {
 		ti81xxvin_err("fh io not allowed\n");
-		return -EACCES;
+		ret = -EACCES;
+		goto qbuf_exit;
 	}
+	mutex_lock(&buf_obj->buf_lock);
+	ti81xxvin_dbg(2, debug, "vidioc_qbuf\n");
+
 	ret = videobuf_qbuf(&buf_obj->buffer_queue, buf);
 	if (buf_obj->started && !ret) {
 		struct videobuf_buffer *vb;
@@ -1698,7 +1705,10 @@ static int vidioc_qbuf(struct file *file, void *priv, struct v4l2_buffer *buf)
 		 * FVID2_queue so that queue call should never return error
 		 */
 		ret = inst->captctrl->queue(inst->captctrl, vb->i);
+		BUG_ON(ret);
 	}
+qbuf_exit:
+	mutex_unlock(&buf_obj->buf_lock);
 	return ret;
 }
 
@@ -1716,6 +1726,7 @@ static int vidioc_dqbuf(struct file *file, void *priv, struct v4l2_buffer *buf)
 	int ret = 0;
 	int num_frms_dequeued;
 
+	mutex_lock(&buf_obj->buf_lock);
 	ti81xxvin_dbg(2, debug, "vidioc_dqbuf\n");
 
 	ret = inst->captctrl->dequeue(inst->captctrl, 0);
@@ -1725,6 +1736,7 @@ static int vidioc_dqbuf(struct file *file, void *priv, struct v4l2_buffer *buf)
 
 	ret = videobuf_dqbuf(&buf_obj->buffer_queue, buf,
 			file->f_flags & O_NONBLOCK);
+	mutex_unlock(&buf_obj->buf_lock);
 	return ret;
 
 }
@@ -1748,30 +1760,30 @@ static int vidioc_streamon(struct file *file, void *priv,
 	u32 addr, offset;
 
 	ti81xxvin_dbg(2, debug, "vidioc_streamon\n");
-	if (mutex_lock_interruptible(&buf_obj->buf_lock))
-		return -ERESTARTSYS;
+	mutex_lock(&buf_obj->buf_lock);
 	vid_ch = &inst->video;
 	if (buftype != V4L2_BUF_TYPE_VIDEO_CAPTURE) {
 		ti81xxvin_dbg(1, debug, "buffer type not supported\n");
-		mutex_unlock(&buf_obj->buf_lock);
-		return -EINVAL;
+		ret = -EINVAL;
+		goto vidioc_streamon_failed;
 	}
 	/* If file handle is not allowed IO, return error */
 	if (!fh->io_allowed) {
 		ti81xxvin_dbg(1, debug, "io not allowed\n");
-		mutex_unlock(&buf_obj->buf_lock);
-		return -EACCES;
+		ret = -EACCES;
+		goto vidioc_streamon_failed;
 	}
 	/* If Streaming is already started, return error */
 	if (buf_obj->started) {
 		ti81xxvin_dbg(1, debug, "instance->started\n");
-		mutex_unlock(&buf_obj->buf_lock);
-		return -EBUSY;
+		ret = -EBUSY;
+		goto vidioc_streamon_failed;
 	}
 	ret = ti81xxvin_check_format(inst, &buf_obj->fmt.fmt.pix, 0);
 	if (ret) {
-		mutex_unlock(&buf_obj->buf_lock);
-		return ret;
+		ti81xxvin_dbg(1, debug, "io not allowed\n");
+		goto vidioc_streamon_failed;
+
 	}
 	/* After checking the buffer format. Call the FVID2 Create and
 	 * Set format for starting the driver
@@ -1782,13 +1794,11 @@ static int vidioc_streamon(struct file *file, void *priv,
 
 	if (ret && (ret != -ENOIOCTLCMD)) {
 		ti81xxvin_dbg(1, debug, "stream on failed in subdev\n");
-		mutex_unlock(&buf_obj->buf_lock);
-		return ret;
+		goto vidioc_streamon_failed;
 	}
 	ret = ti81xxvin_vps_create(inst);
 	if (ret) {
 		ti81xxvin_err("Vps create failed\n");
-		mutex_unlock(&buf_obj->buf_lock);
 		goto ti81xxvin_vps_create_failed;
 
 	}
@@ -1799,7 +1809,6 @@ static int vidioc_streamon(struct file *file, void *priv,
 	ret = videobuf_streamon(&buf_obj->buffer_queue);
 	if (ret) {
 		ti81xxvin_dbg(1, debug, "videobuf_streamon\n");
-		mutex_unlock(&buf_obj->buf_lock);
 		goto streamon_failed;
 	}
 	if (list_empty(&inst->dma_queue)) {
@@ -1853,12 +1862,11 @@ static int vidioc_streamon(struct file *file, void *priv,
 		jiffies + msecs_to_jiffies(100));
 	if (ret)
 		ti81xxvin_err("Setting up of timer failed\n");
-	mutex_unlock(&buf_obj->buf_lock);
 
-	return ret;
+	mutex_unlock(&buf_obj->buf_lock);
+	return 0;
 
 vps_start_failed:
-	mutex_unlock(&buf_obj->buf_lock);
 	videobuf_streamoff(&buf_obj->buffer_queue);
 streamon_failed:
 	vps_capture_unregister_isr(ti81xxvin_instance_isr,
@@ -1866,6 +1874,8 @@ streamon_failed:
 ti81xxvin_vps_create_failed:
 	ret = v4l2_subdev_call(ti81xxvin_obj.sd[inst->curr_sd_index], video,
 			s_stream, 0);
+vidioc_streamon_failed:
+	mutex_unlock(&buf_obj->buf_lock);
 
 	return ret;
 }
@@ -2044,6 +2054,7 @@ static int vidioc_streamoff(struct file *file, void *priv,
 	struct ti81xxvin_buffer_obj *buf_obj = &inst->buf_obj;
 	int ret;
 
+	mutex_lock(&buf_obj->buf_lock);
 	ti81xxvin_dbg(2, debug, "vidioc_streamoff\n");
 
 	if (buftype != V4L2_BUF_TYPE_VIDEO_CAPTURE) {
@@ -2062,10 +2073,6 @@ static int vidioc_streamoff(struct file *file, void *priv,
 		ti81xxvin_dbg(1, debug, "instance->started\n");
 		return -EINVAL;
 	}
-
-	if (mutex_lock_interruptible(&buf_obj->buf_lock))
-		return -ERESTARTSYS;
-
 	ret = ti81xxvin_hdvpss_stop(inst);
 
 	/* Set io_allowed member to false */
@@ -2229,8 +2236,7 @@ static int ti81xxvin_release(struct file *filep)
 
 	buf_obj = &inst->buf_obj;
 
-	if (mutex_lock_interruptible(&buf_obj->buf_lock))
-		return -ERESTARTSYS;
+	mutex_lock(&buf_obj->buf_lock);
 
 	/* Reset io_usrs member of instance object */
 	buf_obj->io_usrs = 0;
@@ -2283,10 +2289,11 @@ static unsigned int ti81xxvin_poll(struct file *filep, poll_table * wait)
 	struct ti81xxvin_buffer_obj *buf_obj = &(instance->buf_obj);
 
 	ti81xxvin_dbg(2, debug, "ti81xxvin_poll\n");
-
+	mutex_lock(&buf_obj->buf_lock);
 	if (buf_obj->started)
 		err = videobuf_poll_stream(filep, &buf_obj->buffer_queue, wait);
 
+	mutex_unlock(&buf_obj->buf_lock);
 	return 0;
 }
 
@@ -2303,8 +2310,9 @@ static int ti81xxvin_mmap(struct file *filep, struct vm_area_struct *vma)
 	struct ti81xxvin_buffer_obj *buf_obj = &(inst->buf_obj);
 
 	ti81xxvin_dbg(2, debug, "ti81xxvin_mmap\n");
-
+	mutex_lock(&buf_obj->buf_lock);
 	return videobuf_mmap_mapper(&buf_obj->buffer_queue, vma);
+	mutex_unlock(&buf_obj->buf_lock);
 }
 /* TI81xx capture file operations */
 static struct v4l2_file_operations hdvpss_fops = {
diff --git a/linux-2.6.37-psp04.04.00.01/drivers/media/video/ti81xx/ti81xxvin_pvt.h b/linux-2.6.37-psp04.04.00.01/drivers/media/video/ti81xx/ti81xxvin_pvt.h
index bde7032..8bc5243 100644
--- a/linux-2.6.37-psp04.04.00.01/drivers/media/video/ti81xx/ti81xxvin_pvt.h
+++ b/linux-2.6.37-psp04.04.00.01/drivers/media/video/ti81xx/ti81xxvin_pvt.h
@@ -123,6 +123,9 @@ struct ti81xxvin_buffer_obj {
 	u8 started;
 	/* Pointer pointing to the last DONE buffer in buffer_queue */
 	struct videobuf_buffer *last_done_buffer;
+	/* Serialize queueing from multiple threads.
+	 * Still de-queue and queue are not serialized
+	 */
 };
 
 struct ti81xxvin_instance_obj {
diff --git a/linux-2.6.37-psp04.04.00.01/drivers/video/ti81xx/vpss/fvid2.c b/linux-2.6.37-psp04.04.00.01/drivers/video/ti81xx/vpss/fvid2.c
index c4b4460..f157c15 100644
--- a/linux-2.6.37-psp04.04.00.01/drivers/video/ti81xx/vpss/fvid2.c
+++ b/linux-2.6.37-psp04.04.00.01/drivers/video/ti81xx/vpss/fvid2.c
@@ -61,8 +61,14 @@ struct vps_fvid2_ctrl {
 	u32                                     fdqprms_phy;
 	struct vps_psrvcallback                 *cbprms;
 	u32                                     cbprms_phy;
-	struct vps_psrvcommandstruct            *cmdprms;
-	u32                                     cmdprms_phy;
+	struct vps_psrvcommandstruct            *createcmdprms;
+	u32                                     createcmdprms_phy;
+	struct vps_psrvcommandstruct            *ctrlcmdprms;
+	u32                                     ctrlcmdprms_phy;
+	struct vps_psrvcommandstruct		*qcmdprms;
+	u32					qcmdprms_phy;
+	struct vps_psrvcommandstruct		*dqcmdprms;
+	u32					dqcmdprms_phy;;
 	struct vps_psrverrorcallback            *ecbprms;
 	u32                                     ecbprms_phy;
 };
@@ -258,20 +264,20 @@ void *vps_fvid2_create(u32 drvid,
 			(struct vps_psrverrorcallback *)fctrl->ecbprms_phy;
 	}
 
-	fctrl->cmdprms->cmdtype = VPS_FVID2_CMDTYPE_SIMPLEX;
-	fctrl->cmdprms->simplexcmdarg = (void *)fctrl->fcrprms_phy;
+	fctrl->createcmdprms->cmdtype = VPS_FVID2_CMDTYPE_SIMPLEX;
+	fctrl->createcmdprms->simplexcmdarg = (void *)fctrl->fcrprms_phy;
 	/*set the event to M3*/
 	#ifdef CONFIG_TI81XX_VPSS_SYSNLINK_NOTIFY
 	status = Notify_sendEvent(fctrl->rmprocid,
 				  fctrl->lineid,
 				  VPS_FVID2_RESERVED_NOTIFY,
-				  fctrl->cmdprms_phy,
+				  fctrl->createcmdprms_phy,
 				  1);
 	#else
 	status = notify_send_event(fctrl->rmprocid,
 				  fctrl->lineid,
 				  VPS_FVID2_RESERVED_NOTIFY,
-				  fctrl->cmdprms_phy,
+				  fctrl->createcmdprms_phy,
 				  1);
 	#endif
 	if (status < 0) {
@@ -358,21 +364,21 @@ int vps_fvid2_delete(void *handle, void *deleteargs)
 	fctrl->fdltprms->returnvalue = VPS_FVID2_M3_INIT_VALUE;
 
 
-	fctrl->cmdprms->cmdtype = VPS_FVID2_CMDTYPE_SIMPLEX;
-	fctrl->cmdprms->simplexcmdarg = (void *)fctrl->fdltprms_phy;
+	fctrl->createcmdprms->cmdtype = VPS_FVID2_CMDTYPE_SIMPLEX;
+	fctrl->createcmdprms->simplexcmdarg = (void *)fctrl->fdltprms_phy;
 
 	/*send event to proxy in M3*/
 	#ifdef CONFIG_TI81XX_VPSS_SYSNLINK_NOTIFY
 	status = Notify_sendEvent(fctrl->rmprocid,
 				  fctrl->lineid,
 				  fctrl->notifyno,
-				  fctrl->cmdprms_phy,
+				  fctrl->createcmdprms_phy,
 				  1);
 	#else
 	status = notify_send_event(fctrl->rmprocid,
 				  fctrl->lineid,
 				  fctrl->notifyno,
-				  fctrl->cmdprms_phy,
+				  fctrl->createcmdprms_phy,
 				  1);
 	#endif
 	if (status < 0) {
@@ -450,20 +456,20 @@ int vps_fvid2_control(void *handle,
 	fctrl->fctrlprms->cmdstatusargs = cmdstatusargs;
 	fctrl->fctrlprms->returnvalue = VPS_FVID2_M3_INIT_VALUE;
 
-	fctrl->cmdprms->cmdtype = VPS_FVID2_CMDTYPE_SIMPLEX;
-	fctrl->cmdprms->simplexcmdarg = (void *)fctrl->fctrlprms_phy;
+	fctrl->ctrlcmdprms->cmdtype = VPS_FVID2_CMDTYPE_SIMPLEX;
+	fctrl->ctrlcmdprms->simplexcmdarg = (void *)fctrl->fctrlprms_phy;
 	/*send the event*/
 	#ifdef CONFIG_TI81XX_VPSS_SYSNLINK_NOTIFY
 	status = Notify_sendEvent(fctrl->rmprocid,
 				  fctrl->lineid,
 				  fctrl->notifyno,
-				  fctrl->cmdprms_phy,
+				  fctrl->ctrlcmdprms_phy,
 				  1);
 	#else
 	status = notify_send_event(fctrl->rmprocid,
 				  fctrl->lineid,
 				  fctrl->notifyno,
-				  fctrl->cmdprms_phy,
+				  fctrl->ctrlcmdprms_phy,
 				  1);
 	#endif
 
@@ -520,21 +526,21 @@ int vps_fvid2_queue(void *handle,
 	fctrl->fqprms->streamid = streamid;
 	fctrl->fqprms->returnvalue = VPS_FVID2_M3_INIT_VALUE;
 
-	fctrl->cmdprms->cmdtype = VPS_FVID2_CMDTYPE_SIMPLEX;
-	fctrl->cmdprms->simplexcmdarg = (void *)fctrl->fqprms_phy;
+	fctrl->qcmdprms->cmdtype = VPS_FVID2_CMDTYPE_SIMPLEX;
+	fctrl->qcmdprms->simplexcmdarg = (void *)fctrl->fqprms_phy;
 
 	/* send event to proxy in M3*/
 	#ifdef CONFIG_TI81XX_VPSS_SYSNLINK_NOTIFY
 	status = Notify_sendEvent(fctrl->rmprocid,
 				  fctrl->lineid,
 				  fctrl->notifyno,
-				  fctrl->cmdprms_phy,
+				  fctrl->qcmdprms_phy,
 				  1);
 	#else
 	status = notify_send_event(fctrl->rmprocid,
 				  fctrl->lineid,
 				  fctrl->notifyno,
-				  fctrl->cmdprms_phy,
+				  fctrl->qcmdprms_phy,
 				  1);
 	#endif
 	if (status < 0) {
@@ -590,8 +596,8 @@ int vps_fvid2_dequeue(void *handle,
 	fctrl->fdqprms->timeout = timeout;
 	fctrl->fdqprms->returnvalue = VPS_FVID2_M3_INIT_VALUE;
 
-	fctrl->cmdprms->cmdtype = VPS_FVID2_CMDTYPE_SIMPLEX;
-	fctrl->cmdprms->simplexcmdarg = (void *)fctrl->fdqprms_phy;
+	fctrl->dqcmdprms->cmdtype = VPS_FVID2_CMDTYPE_SIMPLEX;
+	fctrl->dqcmdprms->simplexcmdarg = (void *)fctrl->fdqprms_phy;
 
 
 	/* send event to proxy in M3*/
@@ -599,13 +605,13 @@ int vps_fvid2_dequeue(void *handle,
 	status = Notify_sendEvent(fctrl->rmprocid,
 				  fctrl->lineid,
 				  fctrl->notifyno,
-				  fctrl->cmdprms_phy,
+				  fctrl->dqcmdprms_phy,
 				  1);
 	#else
 	status = notify_send_event(fctrl->rmprocid,
 				  fctrl->lineid,
 				  fctrl->notifyno,
-				  fctrl->cmdprms_phy,
+				  fctrl->dqcmdprms_phy,
 				  1);
 	#endif
 
@@ -790,11 +796,29 @@ static inline void assign_payload_addr(struct vps_fvid2_ctrl *fctrl,
 				&fctrl->ecbprms_phy,
 				sizeof(struct vps_psrverrorcallback));
 
-	fctrl->cmdprms = (struct vps_psrvcommandstruct *)
+	fctrl->createcmdprms = (struct vps_psrvcommandstruct *)
 			setaddr(pinfo,
 				buf_offset,
-				&fctrl->cmdprms_phy,
+				&fctrl->createcmdprms_phy,
 				sizeof(struct vps_psrvcommandstruct));
+	fctrl->ctrlcmdprms = (struct vps_psrvcommandstruct *)
+			setaddr(pinfo,
+				buf_offset,
+				&fctrl->ctrlcmdprms_phy,
+				sizeof(struct vps_psrvcommandstruct));
+	fctrl->qcmdprms = (struct vps_psrvcommandstruct *)
+			setaddr(pinfo,
+				buf_offset,
+				&fctrl->qcmdprms_phy,
+				sizeof(struct vps_psrvcommandstruct));
+	fctrl->dqcmdprms = (struct vps_psrvcommandstruct *)
+			setaddr(pinfo,
+				buf_offset,
+				&fctrl->dqcmdprms_phy,
+				sizeof(struct vps_psrvcommandstruct));
+
+
+
 
 }
 
-- 
1.7.0.4

