Index: gst-plugins-base-0.10.36/src/gst-libs/gst/video/gstvideofilter.c
===================================================================
--- gst-plugins-base-0.10.36.orig/src/gst-libs/gst/video/gstvideofilter.c	2013-02-28 10:37:38.707842470 -0600
+++ gst-plugins-base-0.10.36/src/gst-libs/gst/video/gstvideofilter.c	2013-02-28 10:42:09.475837831 -0600
@@ -78,14 +78,14 @@
     guint * size)
 {
   GstVideoFormat fmt;
-  gint width, height;
+  gint width, height, rowstride;
 
-  if (!gst_video_format_parse_caps (caps, &fmt, &width, &height)) {
+  if (!gst_video_format_parse_caps_strided (caps, &fmt, &width, &height, &rowstride)) {
     GST_WARNING_OBJECT (btrans, "Failed to parse caps %" GST_PTR_FORMAT, caps);
     return FALSE;
   }
 
-  *size = gst_video_format_get_size (fmt, width, height);
+  *size = gst_video_format_get_size_strided (fmt, width, height, rowstride);
 
   GST_DEBUG_OBJECT (btrans, "Returning size %u bytes for caps %"
       GST_PTR_FORMAT, *size, caps);
Index: gst-plugins-base-0.10.36/src/gst-libs/gst/video/video.c
===================================================================
--- gst-plugins-base-0.10.36.orig/src/gst-libs/gst/video/video.c	2013-02-28 10:37:38.695842470 -0600
+++ gst-plugins-base-0.10.36/src/gst-libs/gst/video/video.c	2013-02-28 10:47:10.951832665 -0600
@@ -308,30 +308,15 @@
 }
 
 /**
- * gst_video_format_parse_caps:
- * @caps: the #GstCaps to parse
- * @format: the #GstVideoFormat of the video represented by @caps (output)
- * @width: the width of the video represented by @caps, may be NULL (output)
- * @height: the height of the video represented by @caps, may be NULL (output)
- *
- * Determines the #GstVideoFormat of @caps and places it in the location
- * pointed to by @format.  Extracts the size of the video and places it
- * in the location pointed to by @width and @height.  If @caps does not
- * represent a video format or does not contain height and width, the
- * function will fail and return FALSE. If @caps does not represent a raw
- * video format listed in #GstVideoFormat, but still contains video caps,
- * this function will return TRUE and set @format to #GST_VIDEO_FORMAT_UNKNOWN.
- *
- * Since: 0.10.16
- *
- * Returns: TRUE if @caps was parsed correctly.
+ * see gst_video_format_parse_caps_strided and gst_video_format_parse_caps
  */
-gboolean
-gst_video_format_parse_caps (const GstCaps * caps, GstVideoFormat * format,
-    int *width, int *height)
+static gboolean
+parse_caps (GstCaps * caps, GstVideoFormat * format, gint *width, gint *height,
+    gboolean stride_ok, gint *rowstride)
 {
   GstStructure *structure;
   gboolean ok = TRUE;
+  gboolean strided = FALSE;
 
   if (!gst_caps_is_fixed (caps))
     return FALSE;
@@ -339,7 +324,10 @@
   structure = gst_caps_get_structure (caps, 0);
 
   if (format) {
-    if (gst_structure_has_name (structure, "video/x-raw-yuv")) {
+    if (gst_structure_has_name (structure, "video/x-raw-yuv") ||
+        (stride_ok &&
+            gst_structure_has_name (structure, "video/x-raw-yuv-strided") &&
+            (strided=TRUE) /* single '=' intentional */)) {
       guint32 fourcc;
 
       ok &= gst_structure_get_fourcc (structure, "format", &fourcc);
@@ -348,7 +336,10 @@
       if (*format == GST_VIDEO_FORMAT_UNKNOWN) {
         ok = FALSE;
       }
-    } else if (gst_structure_has_name (structure, "video/x-raw-rgb")) {
+    } else if (gst_structure_has_name (structure, "video/x-raw-rgb") ||
+        (stride_ok &&
+            gst_structure_has_name (structure, "video/x-raw-rgb-strided") &&
+            (strided=TRUE) /* single '=' intentional */)) {
       int depth;
       int bpp;
       int endianness = 0;
@@ -438,6 +429,10 @@
     }
   }
 
+  /* note: should we require that the caps have these fields, even if
+   * the caller does not particularly request them??
+   */
+
   if (width) {
     ok &= gst_structure_get_int (structure, "width", width);
   }
@@ -446,11 +441,70 @@
     ok &= gst_structure_get_int (structure, "height", height);
   }
 
+  if (rowstride) {
+    if (strided) {
+      ok &= gst_structure_get_int (structure, "rowstride", rowstride);
+    } else {
+      *rowstride = 0;  /* not a strided format */
+    }
+  }
+
   return ok;
 }
 
 
 /**
+ * gst_video_format_parse_caps_strided:
+ * @caps: the #GstCaps to parse
+ * @format: the #GstVideoFormat of the video represented by @caps (output)
+ * @width: the width of the video represented by @caps, may be NULL (output)
+ * @height: the height of the video represented by @caps, may be NULL (output)
+ * @rowstride: the rowstride (in bytes) represented by @caps, or 0 if there
+ *    is no rowstride, may be NULL (output)
+ *
+ * Determines the #GstVideoFormat of @caps and places it in the location
+ * pointed to by @format.  Extracts the size of the video and places it
+ * in the location pointed to by @width and @height.  Extracts the row-
+ * stride and places it in the location pointed to by @rowstride.  If
+ * @caps does not represent one of the raw video formats listed in
+ * #GstVideoFormat, the function will fail and return FALSE.
+ *
+ * Since: ???
+ *
+ * Returns: TRUE if @caps was parsed correctly.
+ */
+gboolean
+gst_video_format_parse_caps_strided (GstCaps * caps, GstVideoFormat * format,
+    int *width, int *height, int *rowstride)
+{
+  return parse_caps (caps, format, width, height, TRUE, rowstride);
+}
+
+/**
+ * gst_video_format_parse_caps:
+ * @caps: the #GstCaps to parse
+ * @format: the #GstVideoFormat of the video represented by @caps (output)
+ * @width: the width of the video represented by @caps, may be NULL (output)
+ * @height: the height of the video represented by @caps, may be NULL (output)
+ *
+ * Determines the #GstVideoFormat of @caps and places it in the location
+ * pointed to by @format.  Extracts the size of the video and places it
+ * in the location pointed to by @width and @height.  If @caps does not
+ * represent one of the raw video formats listed in #GstVideoFormat, the
+ * function will fail and return FALSE.
+ *
+ * Since: 0.10.16
+ *
+ * Returns: TRUE if @caps was parsed correctly.
+ */
+gboolean
+gst_video_format_parse_caps (GstCaps * caps, GstVideoFormat * format,
+    int *width, int *height)
+{
+  return parse_caps (caps, format, width, height, FALSE, NULL);
+}
+
+/**
  * gst_video_parse_caps_framerate:
  * @caps: pointer to a #GstCaps instance
  * @fps_n: pointer to integer to hold numerator of frame rate (output)
@@ -548,6 +602,230 @@
   return res;
 }
 
+/**
+ * gst_video_format_new_caps_strided:
+ * @format: the #GstVideoFormat describing the raw video format
+ * @width: width of video
+ * @height: height of video
+ * @rowstride: the rowstride (in bytes), or 0 if no rowstride
+ * @framerate_n: numerator of frame rate
+ * @framerate_d: denominator of frame rate
+ * @par_n: numerator of pixel aspect ratio
+ * @par_d: denominator of pixel aspect ratio
+ *
+ * Creates a new #GstCaps object based on the parameters provided.
+ *
+ * Since: ???
+ *
+ * Returns: a new #GstCaps object, or NULL if there was an error
+ */
+GstCaps *
+gst_video_format_new_caps_strided (GstVideoFormat format,
+    int width, int height, int rowstride,
+    int framerate_n, int framerate_d, int par_n, int par_d)
+{
+  GstCaps *caps = NULL;
+
+  g_return_val_if_fail (format != GST_VIDEO_FORMAT_UNKNOWN, NULL);
+  g_return_val_if_fail (width > 0 && height > 0, NULL);
+
+  if (gst_video_format_is_yuv (format)) {
+    caps = gst_caps_new_simple (
+        rowstride ? "video/x-raw-yuv-strided" : "video/x-raw-yuv",
+        "format", GST_TYPE_FOURCC, gst_video_format_to_fourcc (format),
+        "width", G_TYPE_INT, width,
+        "height", G_TYPE_INT, height,
+        "framerate", GST_TYPE_FRACTION, framerate_n, framerate_d,
+        "pixel-aspect-ratio", GST_TYPE_FRACTION, par_n, par_d, NULL);
+  } else if (gst_video_format_is_rgb (format)) {
+    GstCaps *caps;
+    int red_mask = 0;
+    int blue_mask = 0;
+    int green_mask = 0;
+    int alpha_mask;
+    int depth;
+    int bpp;
+    gboolean have_alpha;
+    unsigned int mask = 0;
+
+    switch (format) {
+      case GST_VIDEO_FORMAT_RGBx:
+      case GST_VIDEO_FORMAT_BGRx:
+      case GST_VIDEO_FORMAT_xRGB:
+      case GST_VIDEO_FORMAT_xBGR:
+        bpp = 32;
+        depth = 24;
+        have_alpha = FALSE;
+        break;
+      case GST_VIDEO_FORMAT_RGBA:
+      case GST_VIDEO_FORMAT_BGRA:
+      case GST_VIDEO_FORMAT_ARGB:
+      case GST_VIDEO_FORMAT_ABGR:
+        bpp = 32;
+        depth = 32;
+        have_alpha = TRUE;
+        break;
+      case GST_VIDEO_FORMAT_RGB:
+      case GST_VIDEO_FORMAT_BGR:
+        bpp = 24;
+        depth = 24;
+        have_alpha = FALSE;
+        break;
+      case GST_VIDEO_FORMAT_RGB16:
+      case GST_VIDEO_FORMAT_BGR16:
+        bpp = 16;
+        depth = 16;
+        have_alpha = FALSE;
+        break;
+      case GST_VIDEO_FORMAT_RGB15:
+      case GST_VIDEO_FORMAT_BGR15:
+        bpp = 16;
+        depth = 15;
+        have_alpha = FALSE;
+        break;
+      case GST_VIDEO_FORMAT_RGB8_PALETTED:
+        bpp = 8;
+        depth = 8;
+        have_alpha = FALSE;
+        break;
+      case GST_VIDEO_FORMAT_ARGB64:
+        bpp = 64;
+        depth = 64;
+        have_alpha = TRUE;
+        break;
+      case GST_VIDEO_FORMAT_r210:
+        bpp = 32;
+        depth = 30;
+        have_alpha = FALSE;
+        break;
+      default:
+        return NULL;
+    }
+    if (bpp == 32 && depth == 30) {
+      red_mask = 0x3ff00000;
+      green_mask = 0x000ffc00;
+      blue_mask = 0x000003ff;
+      have_alpha = FALSE;
+    } else if (bpp == 32 || bpp == 24 || bpp == 64) {
+      if (bpp == 32) {
+        mask = 0xff000000;
+      } else {
+        mask = 0xff0000;
+      }
+      red_mask =
+          mask >> (8 * gst_video_format_get_component_offset (format, 0,
+              width, height));
+      green_mask =
+          mask >> (8 * gst_video_format_get_component_offset (format, 1,
+              width, height));
+      blue_mask =
+          mask >> (8 * gst_video_format_get_component_offset (format, 2,
+              width, height));
+    } else if (bpp == 16) {
+      switch (format) {
+        case GST_VIDEO_FORMAT_RGB16:
+          red_mask = GST_VIDEO_COMP1_MASK_16_INT;
+          green_mask = GST_VIDEO_COMP2_MASK_16_INT;
+          blue_mask = GST_VIDEO_COMP3_MASK_16_INT;
+          break;
+        case GST_VIDEO_FORMAT_BGR16:
+          red_mask = GST_VIDEO_COMP3_MASK_16_INT;
+          green_mask = GST_VIDEO_COMP2_MASK_16_INT;
+          blue_mask = GST_VIDEO_COMP1_MASK_16_INT;
+          break;
+          break;
+        case GST_VIDEO_FORMAT_RGB15:
+          red_mask = GST_VIDEO_COMP1_MASK_15_INT;
+          green_mask = GST_VIDEO_COMP2_MASK_15_INT;
+          blue_mask = GST_VIDEO_COMP3_MASK_15_INT;
+          break;
+        case GST_VIDEO_FORMAT_BGR15:
+          red_mask = GST_VIDEO_COMP3_MASK_15_INT;
+          green_mask = GST_VIDEO_COMP2_MASK_15_INT;
+          blue_mask = GST_VIDEO_COMP1_MASK_15_INT;
+          break;
+        default:
+          g_assert_not_reached ();
+      }
+    } else if (bpp != 8) {
+      g_assert_not_reached ();
+    }
+
+    caps = gst_caps_new_simple (
+        rowstride ? "video/x-raw-rgb-strided" : "video/x-raw-rgb",
+        "bpp", G_TYPE_INT, bpp,
+        "depth", G_TYPE_INT, depth,
+        "width", G_TYPE_INT, width,
+        "height", G_TYPE_INT, height,
+        "framerate", GST_TYPE_FRACTION, framerate_n, framerate_d,
+        "pixel-aspect-ratio", GST_TYPE_FRACTION, par_n, par_d, NULL);
+
+    if (bpp != 8) {
+      gst_caps_set_simple (caps,
+          "endianness", G_TYPE_INT, G_BIG_ENDIAN,
+          "red_mask", G_TYPE_INT, red_mask,
+          "green_mask", G_TYPE_INT, green_mask,
+          "blue_mask", G_TYPE_INT, blue_mask, NULL);
+    }
+
+    if (have_alpha) {
+      alpha_mask =
+          mask >> (8 * gst_video_format_get_component_offset (format, 3,
+              width, height));
+      gst_caps_set_simple (caps, "alpha_mask", G_TYPE_INT, alpha_mask, NULL);
+    }
+  } else if (gst_video_format_is_gray (format)) {
+    int bpp;
+    int depth;
+    int endianness;
+
+    switch (format) {
+      case GST_VIDEO_FORMAT_GRAY8:
+        bpp = depth = 8;
+        endianness = G_BIG_ENDIAN;
+        break;
+      case GST_VIDEO_FORMAT_GRAY16_BE:
+        bpp = depth = 16;
+        endianness = G_BIG_ENDIAN;
+        break;
+      case GST_VIDEO_FORMAT_GRAY16_LE:
+        bpp = depth = 16;
+        endianness = G_LITTLE_ENDIAN;
+        break;
+      default:
+        return NULL;
+        break;
+    }
+
+    if (bpp > 8) {
+      caps = gst_caps_new_simple ("video/x-raw-gray",
+          "bpp", G_TYPE_INT, bpp,
+          "depth", G_TYPE_INT, depth,
+          "width", G_TYPE_INT, width,
+          "height", G_TYPE_INT, height,
+          "framerate", GST_TYPE_FRACTION, framerate_n, framerate_d,
+          "pixel-aspect-ratio", GST_TYPE_FRACTION, par_n, par_d, NULL);
+    } else {
+      caps = gst_caps_new_simple ("video/x-raw-gray",
+          "bpp", G_TYPE_INT, bpp,
+          "depth", G_TYPE_INT, depth,
+          "endianness", G_TYPE_INT, G_BIG_ENDIAN,
+          "width", G_TYPE_INT, width,
+          "height", G_TYPE_INT, height,
+          "framerate", GST_TYPE_FRACTION, framerate_n, framerate_d,
+          "pixel-aspect-ratio", GST_TYPE_FRACTION, par_n, par_d, NULL);
+    }
+  } else {
+    return NULL;
+  }
+
+  if (rowstride) {
+    gst_caps_set_simple (caps, "rowstride", G_TYPE_INT, rowstride, NULL);
+  }
+
+  return caps;
+}
+
 static GstCaps *
 gst_video_format_new_caps_raw (GstVideoFormat format)
 {
@@ -791,30 +1069,13 @@
  * Returns: a new #GstCaps object, or NULL if there was an error
  */
 GstCaps *
-gst_video_format_new_caps (GstVideoFormat format, int width,
-    int height, int framerate_n, int framerate_d, int par_n, int par_d)
+gst_video_format_new_caps (GstVideoFormat format, int width, int height,
+    int framerate_n, int framerate_d, int par_n, int par_d)
 {
-  GstCaps *caps;
-  GstStructure *structure;
-
-  g_return_val_if_fail (format != GST_VIDEO_FORMAT_UNKNOWN, NULL);
-  g_return_val_if_fail (width > 0 && height > 0, NULL);
-
-  caps = gst_video_format_new_caps_raw (format);
-  if (caps) {
-    structure = gst_caps_get_structure (caps, 0);
-
-    gst_structure_set (structure,
-        "width", G_TYPE_INT, width,
-        "height", G_TYPE_INT, height,
-        "framerate", GST_TYPE_FRACTION, framerate_n, framerate_d,
-        "pixel-aspect-ratio", GST_TYPE_FRACTION, par_n, par_d, NULL);
-  }
-
-  return caps;
+  return gst_video_format_new_caps_strided (format, width, height, 0,
+      framerate_n, framerate_d, par_n, par_d);
 }
 
-
 /**
  * gst_video_format_from_fourcc:
  * @fourcc: a FOURCC value representing raw YUV video
@@ -2076,33 +2337,72 @@
 }
 
 /**
- * gst_video_get_size_from_caps:
- * @caps: a pointer to #GstCaps
- * @size: a pointer to a gint that will be assigned the size (in bytes) of a video frame with the given caps
+ * gst_video_format_get_size_strided:
+ * @format: a #GstVideoFormat
+ * @width: the width of video (in pixels)
+ * @height: the height of video (in pixels)
+ * @rowstride: the rowstride (in bytes), or 0 if no rowstride (in which
+ *    case the returned value is same as #gst_video_format_get_size())
  *
- * Calculates the total number of bytes in the raw video format for the given
- * caps.  This number should be used when allocating a buffer for raw video.
+ * Calculates the total number of bytes in the raw video format, for a buffer
+ * which may have a rowstride in bytes
  *
- * Since: 0.10.36
+ * Since: ???
  *
- * Returns: %TRUE if the size could be calculated from the caps
+ * Returns: size (in bytes) of raw video format
  */
-gboolean
-gst_video_get_size_from_caps (const GstCaps * caps, gint * size)
+int
+gst_video_format_get_size_strided (GstVideoFormat format,
+    int width, int height, int rowstride)
 {
-  GstVideoFormat format = 0;
-  gint width = 0, height = 0;
+  if(!rowstride)
+    return gst_video_format_get_size (format, width, height);
 
-  g_return_val_if_fail (gst_caps_is_fixed (caps), FALSE);
-  g_return_val_if_fail (size != NULL, FALSE);
+  g_return_val_if_fail (format != GST_VIDEO_FORMAT_UNKNOWN, 0);
+  g_return_val_if_fail (width > 0 && height > 0, 0);
 
-  if (gst_video_format_parse_caps (caps, &format, &width, &height) == FALSE) {
-    GST_WARNING ("Could not parse caps: %" GST_PTR_FORMAT, caps);
-    return FALSE;
-  }
+  switch (format) {
+    /* all packed formats have the same calculation, ie. rowstride * height
+     */
+    case GST_VIDEO_FORMAT_RGBx:
+    case GST_VIDEO_FORMAT_BGRx:
+    case GST_VIDEO_FORMAT_xRGB:
+    case GST_VIDEO_FORMAT_xBGR:
+    case GST_VIDEO_FORMAT_RGBA:
+    case GST_VIDEO_FORMAT_BGRA:
+    case GST_VIDEO_FORMAT_ARGB:
+    case GST_VIDEO_FORMAT_ABGR:
+    case GST_VIDEO_FORMAT_RGB16:
+    case GST_VIDEO_FORMAT_BGR16:
+    case GST_VIDEO_FORMAT_RGB15:
+    case GST_VIDEO_FORMAT_BGR15:
+    case GST_VIDEO_FORMAT_RGB:
+    case GST_VIDEO_FORMAT_BGR:
+    case GST_VIDEO_FORMAT_YUY2:
+    case GST_VIDEO_FORMAT_YVYU:
+    case GST_VIDEO_FORMAT_UYVY:
+    case GST_VIDEO_FORMAT_AYUV:
+    case GST_VIDEO_FORMAT_v210:
+    case GST_VIDEO_FORMAT_v216:
+      return GST_ROUND_UP_4 (rowstride * height);
 
-  *size = gst_video_format_get_size (format, width, height);
-  return TRUE;
+    /* these planar formats have 2x sub-sampling in the vertical direction,
+     * so U/V have half as many rows as Y:
+     */
+    case GST_VIDEO_FORMAT_I420:
+    case GST_VIDEO_FORMAT_YV12:
+      return GST_ROUND_UP_4 (2 * rowstride * height);
+
+    /* these planar formats have no sub-sampling in the vertical direction,
+     * so each plane has 'height' number of rows
+     */
+    case GST_VIDEO_FORMAT_Y41B:
+    case GST_VIDEO_FORMAT_Y42B:
+    case GST_VIDEO_FORMAT_Y444:
+      return GST_ROUND_UP_4 (3 * rowstride * height);
+    default:
+      return 0;
+  }
 }
 
 /**
Index: gst-plugins-base-0.10.36/src/gst-libs/gst/video/video.h
===================================================================
--- gst-plugins-base-0.10.36.orig/src/gst-libs/gst/video/video.h	2013-02-28 10:37:38.687842470 -0600
+++ gst-plugins-base-0.10.36/src/gst-libs/gst/video/video.h	2013-02-28 10:47:08.551832706 -0600
@@ -452,7 +452,7 @@
                                                   guint   display_par_n,
                                                   guint   display_par_d);
 
-gboolean       gst_video_format_parse_caps (const GstCaps  * caps,
+gboolean       gst_video_format_parse_caps (GstCaps  * caps,
                                             GstVideoFormat * format,
                                             int            * width,
                                             int            * height);
@@ -460,6 +460,11 @@
 gboolean       gst_video_format_parse_caps_interlaced  (GstCaps  * caps,
                                                         gboolean * interlaced);
 
+gboolean       gst_video_format_parse_caps_strided (GstCaps * caps, 
+													GstVideoFormat * format,
+												    int *width, 
+													int *height, 
+													int *rowstride);
 
 gboolean       gst_video_parse_caps_pixel_aspect_ratio (GstCaps  * caps,
                                                         int      * par_n,
@@ -490,6 +495,12 @@
                                                      int par_n, int par_d,
                                                      gboolean interlaced);
 
+GstCaps * 	   gst_video_format_new_caps_strided (GstVideoFormat format,
+    											  int width, int height, 
+												  int rowstride,
+								    			  int framerate_n, int framerate_d, 
+												  int par_n, int par_d);
+
 GstCaps *      gst_video_format_new_template_caps (GstVideoFormat format);
 
 /* format properties */
@@ -534,7 +545,9 @@
                                                       int            width,
                                                       int            height) G_GNUC_CONST;
 
-gboolean       gst_video_get_size_from_caps (const GstCaps * caps, gint * size);
+int			   gst_video_format_get_size_strided 	 (GstVideoFormat format,
+												      int width, int height, 
+													  int rowstride);
 
 gboolean       gst_video_format_convert (GstVideoFormat  format,
                                          int             width,
