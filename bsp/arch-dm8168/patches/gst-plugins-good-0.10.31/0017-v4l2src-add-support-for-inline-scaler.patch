--- gst-plugins-good-0.10.28/src/sys/v4l2/gstv4l2object.c	2012-03-02 14:23:49.413528740 +0530
+++ gst-plugins-good-0.10.28.new/sys/v4l2/gstv4l2object.c	2012-03-02 11:15:55.877523611 +0530
@@ -1346,7 +1346,7 @@ gst_v4l2_object_get_caps_info (GstV4l2Ob
   const GValue *framerate;
   guint32 fourcc;
   const gchar *mimetype;
-  guint outsize;
+  guint outsize,tmp;
   struct v4l2_format fmt = { 0, };
 
   /* default unknown values */
@@ -1512,6 +1512,7 @@ gst_v4l2_object_get_caps_info (GstV4l2Ob
   fmt.fmt.pix.pixelformat = fourcc;
   fmt.fmt.pix.field = V4L2_FIELD_ANY;
   fmt.fmt.pix.bytesperline = *rs;
+  tmp = *rs;
   if (v4l2_ioctl (v4l2object->video_fd, VIDIOC_TRY_FMT, &fmt) >= 0) {
     if (fmt.fmt.pix.bytesperline == *rs) {
 	  if (GST_IS_V4L2SINK (v4l2object->element))
@@ -1519,6 +1520,8 @@ gst_v4l2_object_get_caps_info (GstV4l2Ob
     } else {
       *rs = fmt.fmt.pix.bytesperline;
     }
+	if(*rs)
+		*rs = tmp;
     GST_INFO_OBJECT (v4l2object->element, "rowstride: %d", *rs);
   } else {
     GST_WARNING_OBJECT (v4l2object->element,
@@ -1954,7 +1957,7 @@ default_frame_sizes:
     /* This code is for Linux < 2.6.19 */
     min_w = min_h = 1;
     max_w = max_h = GST_V4L2_MAX_SIZE;
-    if (!gst_v4l2_object_get_nearest_size (v4l2object, pixelformat, &min_w,
+    /*if (!gst_v4l2_object_get_nearest_size (v4l2object, pixelformat, &min_w,
             &min_h, &interlaced)) {
       GST_WARNING_OBJECT (v4l2object->element,
           "Could not probe minimum capture size for pixelformat %"
@@ -1965,7 +1968,7 @@ default_frame_sizes:
       GST_WARNING_OBJECT (v4l2object->element,
           "Could not probe maximum capture size for pixelformat %"
           GST_FOURCC_FORMAT, GST_FOURCC_ARGS (pixelformat));
-    }
+    }*/
 
     /* Since we can't get framerate directly, try to use the current norm */
     if (v4l2object->norm && v4l2object->norms) {
--- gst-plugins-good-0.10.28/src/sys/v4l2/gstv4l2src.c	2012-03-02 14:23:49.377525389 +0530
+++ gst-plugins-good-0.10.28.new/sys/v4l2/gstv4l2src.c	2012-03-02 14:04:23.389523615 +0530
@@ -217,7 +217,8 @@ static GstFlowReturn
 gst_v4l2src_get_mmap (GstV4l2Src * v4l2src, GstBuffer ** buf);
 
 /* DV query method */
-void gst_v4l2_object_set_dv_preset(GstV4l2Object * v4l2object);
+void gst_v4l2_object_set_dv_preset(GstV4l2Object * v4l2object,guint *maxWidth,guint *maxHeight);
+
 
 
 static void
@@ -612,7 +613,7 @@ gst_v4l2src_get_caps (GstBaseSrc * src)
   return ret;
 }
 
-void gst_v4l2_object_set_dv_preset(GstV4l2Object * v4l2object)
+void gst_v4l2_object_set_dv_preset(GstV4l2Object * v4l2object,guint *maxWidth,guint *maxHeight)
 {
   struct v4l2_dv_preset dv_preset;
 
@@ -622,18 +623,21 @@ void gst_v4l2_object_set_dv_preset(GstV4
   switch (dv_preset.preset) {
 	case V4L2_DV_720P60:
 		printf("\n Mode set is 720P60\n");
+		*maxWidth = 1280;
+		*maxHeight = 720;
 		break;
 	case V4L2_DV_1080I60:
-		printf("\n Mode set is 1080I60\n");
-		break;
 	case V4L2_DV_1080P60:
-		printf("\n Mode set is 1080P60\n");
-		break;
 	case V4L2_DV_1080P30:
-		printf("\n Mode set is 1080P30\n");
+		printf("\n Mode set is 1080\n");
+		*maxWidth = 1920;
+		*maxHeight = 1080;
 		break;
 	default:
+		*maxWidth = 0;
+		*maxHeight = 0;
 		printf("\n Mode set is %d\n", dv_preset.preset);
+		break;
 	}
   v4l2_ioctl (v4l2object->video_fd, VIDIOC_S_DV_PRESET, &dv_preset);
   
@@ -648,6 +652,7 @@ gst_v4l2src_set_caps (GstBaseSrc * src, 
   struct v4l2_fmtdesc *format;
   guint fps_n, fps_d;
   guint size;
+  guint maxWidth,maxHeight;
 
   v4l2src = GST_V4L2SRC (src);
 
@@ -664,7 +669,7 @@ gst_v4l2src_set_caps (GstBaseSrc * src, 
       return FALSE;
   }
 
-  gst_v4l2_object_set_dv_preset(v4l2src->v4l2object);
+  gst_v4l2_object_set_dv_preset(v4l2src->v4l2object,&maxWidth,&maxHeight);
   /* we want our own v4l2 type of fourcc codes */
   if (!gst_v4l2_object_get_caps_info (v4l2src->v4l2object, caps, &format,
       &w, &h, &rs, &interlaced, &fps_n, &fps_d, &size)) {
@@ -673,6 +678,9 @@ gst_v4l2src_set_caps (GstBaseSrc * src, 
     return FALSE;
   }
 
+  if(w > maxWidth || h > maxHeight)
+  	return FALSE;
+
   /* if necessary, update caps for rowstride */
   if (rs) {
     caps = gst_v4l2_object_update_rowstride (v4l2src->v4l2object, caps, rs);
@@ -684,8 +692,8 @@ gst_v4l2src_set_caps (GstBaseSrc * src, 
   /* now store the expected output size */
   v4l2src->frame_byte_size = size;
 
-  if (!gst_v4l2src_set_capture (v4l2src, format->pixelformat, w, h,
-          interlaced, fps_n, fps_d))
+  if (!gst_v4l2src_set_capture (v4l2src, format->pixelformat, w, h, rs,
+          interlaced, fps_n, fps_d, maxWidth, maxHeight))
     /* error already posted */
     return FALSE;
 
--- gst-plugins-good-0.10.28/src/sys/v4l2/v4l2src_calls.c	2012-03-02 14:23:49.377525389 +0530
+++ gst-plugins-good-0.10.28.new/sys/v4l2/v4l2src_calls.c	2012-03-02 14:02:19.201523681 +0530
@@ -216,10 +216,143 @@ too_many_trials:
  *   set capture parameters
  * return value: TRUE on success, FALSE on error
  ******************************************************/
+
+gboolean
+gst_v4l2src_set_format (GstV4l2Object * v4l2object, guint32 pixelformat,
+    guint32 width, guint32 height, guint32 stride, gboolean interlaced,guint maxWidth, guint maxHeight)
+{
+  gint fd = v4l2object->video_fd;
+  struct v4l2_format format;
+  enum v4l2_field field;
+  struct v4l2_crop crop; 
+  struct v4l2_format fmt_win;
+
+  if (interlaced) {
+    GST_DEBUG_OBJECT (v4l2object->element, "interlaced video");
+    /* ideally we would differentiate between types of interlaced video
+     * but there is not sufficient information in the caps..
+     */
+    field = V4L2_FIELD_SEQ_TB;
+  } else {
+    GST_DEBUG_OBJECT (v4l2object->element, "progressive video");
+    field = V4L2_FIELD_NONE;
+  }
+
+  GST_DEBUG_OBJECT (v4l2object->element, "Setting format to %dx%d, format "
+      "%" GST_FOURCC_FORMAT, width, height, GST_FOURCC_ARGS (pixelformat));
+
+  GST_V4L2_CHECK_OPEN (v4l2object);
+  GST_V4L2_CHECK_NOT_ACTIVE (v4l2object);
+
+  memset (&format, 0x00, sizeof (struct v4l2_format));
+  format.type = v4l2object->type;
+
+  if (v4l2_ioctl (fd, VIDIOC_G_FMT, &format) < 0)
+    goto get_fmt_failed;
+
+#if 0
+  if (format.type == v4l2object->type &&
+      format.fmt.pix.width == width &&
+      format.fmt.pix.height == height &&
+      format.fmt.pix.pixelformat == pixelformat &&
+      format.fmt.pix.field == field) {
+    /* Nothing to do. We want to succeed immediately
+     * here because setting the same format back
+     * can still fail due to EBUSY. By short-circuiting
+     * here, we allow pausing and re-playing pipelines
+     * with changed caps, as long as the changed caps
+     * do not change the webcam's format. Otherwise,
+     * any caps change would require us to go to NULL
+     * state to close the device and set format.
+     */
+    return TRUE;
+  }
+#endif
+
+  format.type = v4l2object->type;
+  format.fmt.pix.width = width;
+  format.fmt.pix.height = height;
+  format.fmt.pix.pixelformat = pixelformat;
+  format.fmt.pix.field = field;
+  format.fmt.pix.bytesperline = stride;
+ 	
+  crop.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+  crop.c.left = 0;
+  crop.c.top = 0;
+  crop.c.width = maxWidth;
+  crop.c.height = maxHeight;
+  
+  if (v4l2_ioctl (fd, VIDIOC_S_CROP, &crop) < 0) {
+    goto set_fmt_failed;
+  }
+  
+  fmt_win.type = V4L2_BUF_TYPE_VIDEO_OVERLAY;
+  fmt_win.fmt.win.w.left = 0;
+  fmt_win.fmt.win.w.top = 0;
+  fmt_win.fmt.win.w.width = width;
+  fmt_win.fmt.win.w.height = height;
+  
+  if (v4l2_ioctl (fd, VIDIOC_S_FMT, &fmt_win) < 0) {
+    goto set_fmt_failed;
+  }
+
+  if (v4l2_ioctl (fd, VIDIOC_S_FMT, &format) < 0) {
+    goto set_fmt_failed;
+  }
+
+  if (format.fmt.pix.width != width || format.fmt.pix.height != height)
+    goto invalid_dimensions;
+
+  if (format.fmt.pix.pixelformat != pixelformat)
+    goto invalid_pixelformat;
+
+  return TRUE;
+
+  /* ERRORS */
+get_fmt_failed:
+  {
+    GST_ELEMENT_ERROR (v4l2object->element, RESOURCE, SETTINGS,
+        (_("Device '%s' does not support video capture"),
+            v4l2object->videodev),
+        ("Call to G_FMT failed: (%s)", g_strerror (errno)));
+    return FALSE;
+  }
+set_fmt_failed:
+  {
+    GST_ELEMENT_ERROR (v4l2object->element, RESOURCE, SETTINGS,
+        (_("Device '%s' cannot capture at %dx%d"),
+            v4l2object->videodev, width, height),
+        ("Call to S_FMT failed for %" GST_FOURCC_FORMAT " @ %dx%d: %s",
+            GST_FOURCC_ARGS (pixelformat), width, height, g_strerror (errno)));
+    return FALSE;
+  }
+invalid_dimensions:
+  {
+    GST_ELEMENT_ERROR (v4l2object->element, RESOURCE, SETTINGS,
+        (_("Device '%s' cannot capture at %dx%d"),
+            v4l2object->videodev, width, height),
+        ("Tried to capture at %dx%d, but device returned size %dx%d",
+            width, height, format.fmt.pix.width, format.fmt.pix.height));
+    return FALSE;
+  }
+invalid_pixelformat:
+  {
+    GST_ELEMENT_ERROR (v4l2object->element, RESOURCE, SETTINGS,
+        (_("Device '%s' cannot capture in the specified format"),
+            v4l2object->videodev),
+        ("Tried to capture in %" GST_FOURCC_FORMAT
+            ", but device returned format" " %" GST_FOURCC_FORMAT,
+            GST_FOURCC_ARGS (pixelformat),
+            GST_FOURCC_ARGS (format.fmt.pix.pixelformat)));
+    return FALSE;
+  }
+}
+
+
 gboolean
 gst_v4l2src_set_capture (GstV4l2Src * v4l2src, guint32 pixelformat,
-    guint32 width, guint32 height, gboolean interlaced,
-    guint fps_n, guint fps_d)
+    guint32 width, guint32 height, guint32 stride, gboolean interlaced,
+    guint fps_n, guint fps_d, guint maxWidth, guint maxHeight)
 {
   gint fd = v4l2src->v4l2object->video_fd;
   struct v4l2_streamparm stream;
@@ -227,8 +360,8 @@ gst_v4l2src_set_capture (GstV4l2Src * v4
   if (pixelformat == GST_MAKE_FOURCC ('M', 'P', 'E', 'G'))
     return TRUE;
 
-  if (!gst_v4l2_object_set_format (v4l2src->v4l2object, pixelformat, width,
-          height, interlaced)) {
+  if (!gst_v4l2src_set_format /*gst_v4l2_object_set_format*/(v4l2src->v4l2object, pixelformat, width,
+          height, stride,interlaced,maxWidth,maxHeight)) {
     /* error already reported */
     return FALSE;
   }
--- gst-plugins-good-0.10.28/src/sys/v4l2/v4l2src_calls.h	2011-03-08 19:24:35.000000000 +0530
+++ gst-plugins-good-0.10.28.new/sys/v4l2/v4l2src_calls.h	2012-03-02 14:03:21.765524476 +0530
@@ -30,9 +30,9 @@
 gboolean   gst_v4l2src_get_capture       (GstV4l2Src * v4l2src);
 gboolean   gst_v4l2src_set_capture       (GstV4l2Src * v4l2src,
                                           guint32 pixelformat,
-                                          guint32 width, guint32 height,
+                                          guint32 width, guint32 height, guint32 stride,
                                           gboolean interlaced,
-                                          guint32 fps_n, guint32 fps_d);
+                                          guint32 fps_n, guint32 fps_d, guint maxWidth, guint maxHeight);
 
 gboolean   gst_v4l2src_capture_init      (GstV4l2Src * v4l2src, GstCaps *caps);
 gboolean   gst_v4l2src_capture_start     (GstV4l2Src * v4l2src);
