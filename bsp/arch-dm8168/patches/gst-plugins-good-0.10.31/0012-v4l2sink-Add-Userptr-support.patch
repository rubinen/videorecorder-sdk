Index: gst-plugins-good-0.10.31/src/sys/v4l2/Makefile.am
===================================================================
--- gst-plugins-good-0.10.31.orig/src/sys/v4l2/Makefile.am	2011-12-11 12:48:12.000000000 -0600
+++ gst-plugins-good-0.10.31/src/sys/v4l2/Makefile.am	2013-02-22 11:58:18.998826794 -0600
@@ -21,7 +21,8 @@
 				$(xv_source)
 
 if BUILD_EXPERIMENTAL
-libgstvideo4linux2_la_SOURCES += gstv4l2sink.c
+libgstvideo4linux2_la_SOURCES += gstv4l2sink.c \
+                                 gstv4l2_userpointer.c
 endif
 
 libgstvideo4linux2_la_CFLAGS =   $(GST_PLUGINS_BASE_CFLAGS) \
@@ -50,6 +51,7 @@
 	gstv4l2bufferpool.h \
 	gstv4l2colorbalance.h \
 	gstv4l2object.h \
+    gstv4l2_userpointer.h \
 	gstv4l2sink.h \
 	gstv4l2src.h \
 	gstv4l2radio.h \
Index: gst-plugins-good-0.10.31/src/sys/v4l2/Makefile.in
===================================================================
--- gst-plugins-good-0.10.31.orig/src/sys/v4l2/Makefile.in	2012-02-20 18:09:05.000000000 -0600
+++ gst-plugins-good-0.10.31/src/sys/v4l2/Makefile.in	2013-02-22 11:58:18.998826794 -0600
@@ -35,7 +35,7 @@
 POST_UNINSTALL = :
 build_triplet = @build@
 host_triplet = @host@
-@BUILD_EXPERIMENTAL_TRUE@am__append_1 = gstv4l2sink.c
+@BUILD_EXPERIMENTAL_TRUE@am__append_1 = gstv4l2sink.c gstv4l2_userpointer.c
 subdir = sys/v4l2
 DIST_COMMON = README $(noinst_HEADERS) $(srcdir)/Makefile.am \
 	$(srcdir)/Makefile.in
@@ -122,11 +122,11 @@
 am__libgstvideo4linux2_la_SOURCES_DIST = gstv4l2.c \
 	gstv4l2colorbalance.c gstv4l2object.c gstv4l2bufferpool.c \
 	gstv4l2src.c gstv4l2radio.c gstv4l2tuner.c gstv4l2vidorient.c \
-	v4l2_calls.c v4l2src_calls.c gstv4l2xoverlay.c gstv4l2sink.c
+	v4l2_calls.c v4l2src_calls.c gstv4l2xoverlay.c gstv4l2sink.c gstv4l2_userpointer.c
 @USE_XVIDEO_TRUE@am__objects_1 =  \
 @USE_XVIDEO_TRUE@	libgstvideo4linux2_la-gstv4l2xoverlay.lo
 @BUILD_EXPERIMENTAL_TRUE@am__objects_2 =  \
-@BUILD_EXPERIMENTAL_TRUE@	libgstvideo4linux2_la-gstv4l2sink.lo
+@BUILD_EXPERIMENTAL_TRUE@	libgstvideo4linux2_la-gstv4l2sink.lo libgstvideo4linux2_la-gstv4l2_userpointer.lo
 am_libgstvideo4linux2_la_OBJECTS = libgstvideo4linux2_la-gstv4l2.lo \
 	libgstvideo4linux2_la-gstv4l2colorbalance.lo \
 	libgstvideo4linux2_la-gstv4l2object.lo \
@@ -534,6 +534,7 @@
 	gstv4l2bufferpool.h \
 	gstv4l2colorbalance.h \
 	gstv4l2object.h \
+    gstv4l2_userpointer.h \
 	gstv4l2sink.h \
 	gstv4l2src.h \
 	gstv4l2radio.h \
@@ -629,6 +630,7 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgstvideo4linux2_la-gstv4l2xoverlay.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgstvideo4linux2_la-v4l2_calls.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgstvideo4linux2_la-v4l2src_calls.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgstvideo4linux2_la-gstv4l2_userpointer.Plo@am__quote@
 
 .c.o:
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@@ -735,6 +737,15 @@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgstvideo4linux2_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgstvideo4linux2_la_CFLAGS) $(CFLAGS) -c -o libgstvideo4linux2_la-gstv4l2sink.lo `test -f 'gstv4l2sink.c' || echo '$(srcdir)/'`gstv4l2sink.c
 
+libgstvideo4linux2_la-gstv4l2_userpointer.lo: gstv4l2_userpointer.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgstvideo4linux2_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgstvideo4linux2_la_CFLAGS) $(CFLAGS) -MT libgstvideo4linux2_la-gstv4l2_userpointer.lo -MD -MP -MF $(DEPDIR)/libgstvideo4linux2_la-gstv4l2_userpointer.Tpo -c -o libgstvideo4linux2_la-gstv4l2_userpointer.lo `test -f 'gstv4l2_userpointer.c' || echo '$(srcdir)/'`gstv4l2_userpointer.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/libgstvideo4linux2_la-gstv4l2_userpointer.Tpo $(DEPDIR)/libgstvideo4linux2_la-gstv4l2_userpointer.Plo
+@am__fastdepCC_FALSE@	$(AM_V_CC) @AM_BACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='gstv4l2_userpointer.c' object='libgstvideo4linux2_la-gstv4l2_userpointer.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgstvideo4linux2_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libgstvideo4linux2_la_CFLAGS) $(CFLAGS) -c -o libgstvideo4linux2_la-gstv4l2_userpointer.lo `test -f 'gstv4l2_userpointer.c' || echo '$(srcdir)/'`gstv4l2_userpointer.c
+
+
 mostlyclean-libtool:
 	-rm -f *.lo
 
Index: gst-plugins-good-0.10.31/src/sys/v4l2/gstv4l2_userpointer.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gst-plugins-good-0.10.31/src/sys/v4l2/gstv4l2_userpointer.c	2013-02-22 11:58:19.010826794 -0600
@@ -0,0 +1,130 @@
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+
+#include "gstv4l2colorbalance.h"
+#ifdef HAVE_XVIDEO
+#include "gstv4l2xoverlay.h"
+#endif
+#include "gstv4l2vidorient.h"
+
+#include "gstv4l2sink.h"
+#include "gst/gst-i18n-plugin.h"
+
+#include <string.h>
+#include "gstv4l2_userpointer.h"
+
+gint
+gst_v4l2sink_userpointer_init(GstBaseSink * bsink,GstV4l2Sink * v4l2sink)
+{
+ 
+   gint retval = 0,i =0;  
+   struct v4l2_requestbuffers reqbuf = {0};
+   
+   if(v4l2sink->gst_buf_array == NULL) { 
+     memset (&reqbuf, 0, sizeof (struct v4l2_requestbuffers));
+     reqbuf.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+     reqbuf.count = v4l2sink->num_buffers;
+     reqbuf.memory = V4L2_MEMORY_USERPTR;
+		
+     if ((retval = v4l2_ioctl(v4l2sink->v4l2object->video_fd, VIDIOC_REQBUFS, &reqbuf))) {
+       GST_DEBUG_OBJECT (v4l2sink, "ioctl for VIDIOC_REQBUFS FAILED"); 
+       switch(errno) {
+         case EBUSY:
+           GST_DEBUG_OBJECT (v4l2sink, "Error : EBUSY");
+         break;
+         case EINVAL:
+           GST_DEBUG_OBJECT (v4l2sink, "Error : EINVAL");
+         break;
+         default:
+           GST_DEBUG_OBJECT (v4l2sink, "Error : unknown error");
+         break;
+       }// switch
+     } // if ..ioctl..
+ 
+     v4l2sink->queued_buff_count = 0;
+     /* allocate a gst buffer array to hold the buffers given to v4l2 for display */
+     v4l2sink->gst_buf_array = (GstBuffer **)malloc(sizeof(GstBuffer *)* (v4l2sink->num_buffers));
+     for(i =0; i<v4l2sink->num_buffers;i++) {
+       v4l2sink->gst_buf_array[i] = NULL;
+     }
+   }
+   else {
+     GST_DEBUG_OBJECT (v4l2sink, "Driver is already initialized");
+   }
+   return 1;
+}
+
+void
+gst_v4l2sink_enqueue_userpointer(GstV4l2Sink * v4l2sink,GstBuffer * buf)
+{
+
+   gint i=0;	
+   struct v4l2_buffer v4l2buffer = {0};
+
+   for(i =0; i<v4l2sink->num_buffers;i++) {
+     if(v4l2sink->gst_buf_array[i] == NULL) {
+       v4l2sink->gst_buf_array[i] = buf;
+       break;
+     }
+   }
+
+   v4l2buffer.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;	
+   v4l2buffer.memory = V4L2_MEMORY_USERPTR;
+   v4l2buffer.m.userptr = (unsigned long)GST_BUFFER_DATA(buf);
+   v4l2buffer.length = GST_BUFFER_SIZE(buf);
+   v4l2buffer.index = i; 
+
+   if (v4l2_ioctl (v4l2sink->v4l2object->video_fd, VIDIOC_QBUF, &v4l2buffer) < 0) {    
+     GST_DEBUG_OBJECT (v4l2sink, "Queuing user buffer  %p with v4l2 driver failed",buf);
+     v4l2sink->gst_buf_array[i] = NULL;
+   }
+   else {
+     GST_DEBUG_OBJECT (v4l2sink, "Queued user buffer %p with v4l2 driver",buf);
+     v4l2sink->queued_buff_count++;
+     /* add reference to the corresponding gst buffer so that upstream plugin 
+      does not  overwrites it while displaying */
+     gst_buffer_ref (buf);
+  }
+}
+
+void
+gst_v4l2sink_dequeue_userpointer(GstV4l2Sink * v4l2sink, int min_queue_count)
+{
+   struct v4l2_buffer buffer = {0};
+   memset (&buffer, 0x00, sizeof (buffer));
+   buffer.type = V4L2_BUF_TYPE_VIDEO_OUTPUT;
+   buffer.memory = V4L2_MEMORY_USERPTR;
+   	
+   while(v4l2sink->queued_buff_count > min_queue_count) {
+     if(v4l2_ioctl (v4l2sink->v4l2object->video_fd, VIDIOC_DQBUF, &buffer) >= 0) {
+       GST_DEBUG_OBJECT (v4l2sink, "Dequeued the buffer: %p",v4l2sink->gst_buf_array[buffer.index]);
+       v4l2sink->queued_buff_count--;
+       /* unreference the corresponding gst buffer so that upstream plugin can access */
+       if(v4l2sink->gst_buf_array[buffer.index])
+         gst_buffer_unref(v4l2sink->gst_buf_array[buffer.index]);
+
+       v4l2sink->gst_buf_array[buffer.index] = NULL;
+     }
+     else {
+       GST_DEBUG_OBJECT (v4l2sink, "Failed to dequeue the buffer");
+     break;
+     }
+   }
+}
+
+void
+gst_v4l2sink_userpointer_deinit(GstV4l2Sink * v4l2sink)
+{
+   
+   if(v4l2sink->gst_buf_array) {
+     GST_DEBUG_OBJECT (v4l2sink, "Freeing the gst_buf_array");
+     gst_v4l2sink_dequeue_userpointer(v4l2sink, 0);
+     free(v4l2sink->gst_buf_array);
+     v4l2sink->gst_buf_array = NULL;
+   }
+  
+}
+
+
Index: gst-plugins-good-0.10.31/src/sys/v4l2/gstv4l2_userpointer.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gst-plugins-good-0.10.31/src/sys/v4l2/gstv4l2_userpointer.h	2013-02-22 11:58:19.018826794 -0600
@@ -0,0 +1,20 @@
+#ifndef GSTV4L2SINK_USERPTR_H
+#define GSTV4L2SINK_USERPTR_H
+
+#include <gst/video/gstvideosink.h>
+#include <gstv4l2object.h>
+#include <gstv4l2bufferpool.h>
+#include"gstv4l2sink.h"
+#include <stdlib.h>
+
+
+gint
+gst_v4l2sink_userpointer_init(GstBaseSink * ,GstV4l2Sink *);
+void
+gst_v4l2sink_enqueue_userpointer(GstV4l2Sink * ,GstBuffer * );
+void
+gst_v4l2sink_dequeue_userpointer(GstV4l2Sink * , int );
+void
+gst_v4l2sink_userpointer_deinit(GstV4l2Sink * );
+
+#endif
Index: gst-plugins-good-0.10.31/src/sys/v4l2/gstv4l2sink.c
===================================================================
--- gst-plugins-good-0.10.31.orig/src/sys/v4l2/gstv4l2sink.c	2013-02-22 11:58:18.986826794 -0600
+++ gst-plugins-good-0.10.31/src/sys/v4l2/gstv4l2sink.c	2013-02-22 11:59:33.042826645 -0600
@@ -63,6 +63,7 @@
 
 #include "gstv4l2sink.h"
 #include "gst/gst-i18n-plugin.h"
+#include "gstv4l2_userpointer.h"
 
 #include <string.h>
 
@@ -93,6 +94,7 @@
   PROP_CROP_HEIGHT,
   PROP_ROTATION,
   PROP_FLIP,
+  PROP_USERPOINTER,
 };
 
 
@@ -364,6 +366,11 @@
           "Flip horizontal/vertical",
           GST_TYPE_V4L2_FLIP, FLIP_NONE, G_PARAM_READWRITE));
 
+  g_object_class_install_property (gobject_class, PROP_USERPOINTER,
+      g_param_spec_boolean("userpointer", "User Pointer",
+          "configures using user pointer for display without memcopy",
+           TRUE, G_PARAM_READWRITE));
+
   basesink_class->get_caps = GST_DEBUG_FUNCPTR (gst_v4l2sink_get_caps);
   basesink_class->set_caps = GST_DEBUG_FUNCPTR (gst_v4l2sink_set_caps);
   basesink_class->buffer_alloc = GST_DEBUG_FUNCPTR (gst_v4l2sink_buffer_alloc);
@@ -398,6 +405,8 @@
   v4l2sink->state = 0;
   v4l2sink->rotation = 0;
   v4l2sink->flip = FLIP_NONE;
+  v4l2sink->gst_buf_array = NULL;
+  v4l2sink->enableUserPtr = TRUE;
 }
 
 static void
@@ -652,6 +661,9 @@
         v4l2sink->flip = g_value_get_enum (value);
         gst_v4l2sink_sync_flip (v4l2sink);
         break;
+      case PROP_USERPOINTER:
+        v4l2sink->enableUserPtr = g_value_get_boolean (value);
+        break;
       default:
         G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
         break;
@@ -705,6 +717,9 @@
       case PROP_FLIP:
         g_value_set_enum (value, v4l2sink->flip);
         break;
+      case PROP_USERPOINTER:
+       g_value_set_boolean (value, v4l2sink->enableUserPtr);
+        break;
       default:
         G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
         break;
@@ -717,6 +732,7 @@
 {
   GstStateChangeReturn ret = GST_STATE_CHANGE_SUCCESS;
   GstV4l2Sink *v4l2sink = GST_V4L2SINK (element);
+  gint i = 0;
 
   GST_DEBUG_OBJECT (v4l2sink, "%d -> %d",
       GST_STATE_TRANSITION_CURRENT (transition),
@@ -730,11 +746,30 @@
       gst_v4l2sink_sync_rotation (v4l2sink);
       gst_v4l2sink_sync_flip (v4l2sink);
       break;
+    case GST_STATE_CHANGE_PLAYING_TO_PAUSED:
+      break;
     default:
       break;
   }
-
-  ret = GST_ELEMENT_CLASS (parent_class)->change_state (element, transition);
+  if(transition == GST_STATE_CHANGE_PAUSED_TO_READY){
+    if(v4l2sink->enableUserPtr) {
+	GST_DEBUG_OBJECT (v4l2sink, "!!!!!!!!!unreference all the remaining buffers!!!!!!!!!");
+        printf("\n!!!!!!!!!unreference all the remaining buffers!!!!!!!!!");
+        if(v4l2sink->gst_buf_array != NULL){
+	   for(i = 0;i<v4l2sink->num_buffers;i++) {
+ 	      if(v4l2sink->gst_buf_array[i] != NULL) {
+	        gst_buffer_unref(v4l2sink->gst_buf_array[i]);
+                v4l2sink->gst_buf_array[i] = NULL;
+	      }
+	   }
+        }
+      }
+      ret = GST_ELEMENT_CLASS (parent_class)->change_state (element, transition);
+   }
+  else{
+      ret = GST_ELEMENT_CLASS (parent_class)->change_state (element, transition);
+  }
+  
 
   switch (transition) {
     case GST_STATE_CHANGE_PAUSED_TO_READY:
@@ -746,9 +781,14 @@
       }
       break;
     case GST_STATE_CHANGE_READY_TO_NULL:
-      if (NULL != v4l2sink->pool)
+      if (NULL != v4l2sink->pool){
         gst_v4l2_buffer_pool_destroy (v4l2sink->pool);
       v4l2sink->pool = NULL;
+      }
+      if(v4l2sink->gst_buf_array){
+	    gst_v4l2sink_userpointer_deinit(v4l2sink);
+      }
+      
       /* close the device */
       if (!gst_v4l2_object_stop (v4l2sink->v4l2object))
         return GST_STATE_CHANGE_FAILURE;
@@ -883,6 +923,18 @@
     gst_caps_unref (caps);
     return FALSE;
   }
+  if (v4l2sink->gst_buf_array) {
+    /* TODO: if we've already allocated buffers, we probably need to
+     * do something here to free and reallocate....
+     *
+     *   gst_v4l2_object_stop_streaming()
+     *   gst_v4l2_buffer_pool_destroy()
+     *
+     */
+    GST_DEBUG_OBJECT (v4l2sink, "warning, changing caps not supported yet");
+    gst_caps_unref (caps);
+    return FALSE;
+  }
 
   /* query to find if anyone upstream using these buffers has any
    * minimum requirements:
@@ -1104,11 +1156,13 @@
 {
   GstV4l2Sink *v4l2sink = GST_V4L2SINK (bsink);
   GstBuffer *newbuf = NULL;
+  gint retval = 0;
 
   GST_DEBUG_OBJECT (v4l2sink, "render buffer: %p", buf);
 
-  if (!GST_IS_V4L2_BUFFER (buf)) {
-    GstFlowReturn ret;
+  if(!v4l2sink->enableUserPtr){
+    if (!GST_IS_V4L2_BUFFER (buf)) {
+      GstFlowReturn ret;
 
     /* special case check for sub-buffers:  In certain cases, places like
      * GstBaseTransform, which might check that the buffer is writable
@@ -1187,7 +1241,37 @@
       gst_buffer_unref (GST_BUFFER (v4l2buf));
     }
   }
+ }
+ else {
+    /*configures the v4l2 to user pointer mode only once*/
+    if(v4l2sink->gst_buf_array == NULL) {
+      v4l2sink->state = STATE_PENDING_STREAMON;
+      /*Initializes the driver to use userpointers*/      	
+      retval = gst_v4l2sink_userpointer_init(bsink,v4l2sink);
+      if(retval > 0) {
+        GST_DEBUG_OBJECT (v4l2sink, "succeess fully initialized the driver for user pointer mode");
+      }
+      else {
+        GST_DEBUG_OBJECT (v4l2sink, "failed to initialized the driver for user pointer mode");
+      }
+   }
+
+   /*Enqueues the buffer with v4l2*/
+   gst_v4l2sink_enqueue_userpointer(v4l2sink,buf);
+
+   if (v4l2sink->state == STATE_PENDING_STREAMON) {
+     GST_DEBUG_OBJECT (v4l2sink, "Start streaming");
+     if (!gst_v4l2_object_start_streaming (v4l2sink->v4l2object)) {
+       GST_DEBUG_OBJECT (v4l2sink, "Failed to Start streaming");	
+       return GST_FLOW_ERROR;
+     }
+     v4l2sink->state = STATE_STREAMING;
+   }
+  
+   /*Dequeues the previous buffer from v4l2*/
+   gst_v4l2sink_dequeue_userpointer(v4l2sink,v4l2sink->min_queued_bufs);
 
+ }
   return GST_FLOW_OK;
 }
 
Index: gst-plugins-good-0.10.31/src/sys/v4l2/gstv4l2sink.h
===================================================================
--- gst-plugins-good-0.10.31.orig/src/sys/v4l2/gstv4l2sink.h	2013-02-22 11:58:18.910826794 -0600
+++ gst-plugins-good-0.10.31/src/sys/v4l2/gstv4l2sink.h	2013-02-22 11:58:19.034826794 -0600
@@ -78,6 +78,9 @@
   guint8 state;
   gint rotation;
   gint flip;
+  GstBuffer **gst_buf_array;
+  gint queued_buff_count;
+  gboolean enableUserPtr;
 };
 
 struct _GstV4l2SinkClass {
