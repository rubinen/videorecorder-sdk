Index: gstreamer-0.10.36/src/libs/gst/base/gstbasetransform.c
===================================================================
--- gstreamer-0.10.36.orig/src/libs/gst/base/gstbasetransform.c	2011-12-29 19:14:36.000000000 -0600
+++ gstreamer-0.10.36/src/libs/gst/base/gstbasetransform.c	2013-02-21 09:59:23.080966605 -0600
@@ -2473,14 +2473,26 @@
 
 no_qos:
 
-  /* first try to allocate an output buffer based on the currently negotiated
-   * format. While we call pad-alloc we could renegotiate the srcpad format or
-   * have a new suggestion for upstream buffer-alloc.
-   * In any case, outbuf will contain a buffer suitable for doing the configured
-   * transform after this function. */
-  ret = gst_base_transform_prepare_output_buffer (trans, inbuf, outbuf);
-  if (G_UNLIKELY (ret != GST_FLOW_OK))
-    goto no_buffer;
+  if (trans->passthrough) {
+    /* I'm not yet sure if we should bypass allocating output buffer in case of
+     * passthrough, or if I should override the prepare_output_buffer vmethod..
+     * I think the argument for always doing buffer allocation is to give a
+     * chance for upstream caps-renegotiation.. except I think the existing
+     * gst_base_transform_buffer_alloc() which itself does a pad_alloc() should
+     * be sufficient..
+     */
+    GST_DEBUG_OBJECT (trans, "reuse input buffer");
+    *outbuf = inbuf;
+  } else {
+    /* first try to allocate an output buffer based on the currently negotiated
+     * format. While we call pad-alloc we could renegotiate the srcpad format or
+     * have a new suggestion for upstream buffer-alloc.
+     * In any case, outbuf will contain a buffer suitable for doing the configured
+     * transform after this function. */
+    ret = gst_base_transform_prepare_output_buffer (trans, inbuf, outbuf);
+    if (G_UNLIKELY (ret != GST_FLOW_OK))
+      goto no_buffer;
+  }
 
   /* now perform the needed transform */
   if (trans->passthrough) {
