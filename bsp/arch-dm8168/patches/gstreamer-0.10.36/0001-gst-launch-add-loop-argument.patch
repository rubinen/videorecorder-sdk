Index: gstreamer-0.10.36/src/tools/gst-launch.c
===================================================================
--- gstreamer-0.10.36.orig/src/tools/gst-launch.c	2011-12-29 19:14:40.000000000 -0600
+++ gstreamer-0.10.36/src/tools/gst-launch.c	2013-02-20 15:57:29.082646517 -0600
@@ -923,6 +923,7 @@
   gboolean trace = FALSE;
   gboolean eos_on_shutdown = FALSE;
   gboolean check_index = FALSE;
+  gboolean loop = FALSE;
   gchar *savefile = NULL;
   gchar *exclude_args = NULL;
 #ifndef GST_DISABLE_OPTION_PARSING
@@ -951,6 +952,8 @@
         N_("Force EOS on sources before shutting the pipeline down"), NULL},
     {"index", 'i', 0, G_OPTION_ARG_NONE, &check_index,
         N_("Gather and print index statistics"), NULL},
+    {"loop", 'l', 0, G_OPTION_ARG_NONE, &loop,
+        N_("Repeat clip in loop without rebuilding pipeline"), NULL},
     GST_TOOLS_GOPTION_VERSION,
     {NULL}
   };
@@ -1154,7 +1157,18 @@
       }
 
       tfthen = gst_util_get_timestamp ();
-      caught_error = event_loop (pipeline, TRUE, GST_STATE_PLAYING);
+      do {
+        caught_error = event_loop (pipeline, TRUE, GST_STATE_PLAYING);
+        if (loop && (caught_error == ELR_NO_ERROR)) {
+          PRINT (_("Looping ...\n"));
+          gst_element_seek (pipeline, 1.0,
+              GST_FORMAT_TIME,
+              GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT,
+              GST_SEEK_TYPE_SET, 0, GST_SEEK_TYPE_NONE, GST_CLOCK_TIME_NONE);
+        } else {
+          break;
+        }
+      } while (TRUE);
       if (eos_on_shutdown && caught_error == ELR_INTERRUPT) {
         PRINT (_("EOS on shutdown enabled -- Forcing EOS on the pipeline\n"));
         waiting_eos = TRUE;
