diff --git a/src/Makefile b/src/Makefile
index 2664c8c..519a083 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -3308,6 +3308,7 @@ ti8168_evm_config_nor	\
 ti8168_evm_config_spi	\
 ti8168_evm_config_sd	\
 ti8168_evm_min_ocmc	\
+ti8168_evm_min2_sd_pcie_ep\
 ti8168_evm_min_sd:	unconfig
 	@mkdir -p $(obj)include
 	@echo "#define CONFIG_TI81XX"	>>$(obj)include/config.h
@@ -3331,6 +3332,12 @@ ti8168_evm_min_sd:	unconfig
 		echo "#define CONFIG_SD_BOOT"    >>$(obj)include/config.h ; \
 		echo "TI_IMAGE = u-boot.min.sd" >>$(obj)board/ti/ti8168/config.tmp; \
 		echo "Setting up TI8168 SD boot minimal build..." ; \
+	elif [ "$(findstring _min2_sd_pcie_ep,$@)" ] ; then \
+		echo "#define CONFIG_SYS_NO_FLASH"    >>$(obj)include/config.h ; \
+		echo "#define CONFIG_SD_BOOT"    >>$(obj)include/config.h ; \
+		echo "#define CONFIG_TI81XX_PCIE_ENDPOINT"    >>$(obj)include/config.h ; \
+		echo "TI_IMAGE = u-boot.min.sd" >>$(obj)board/ti/ti8168/config.tmp; \
+		echo "Setting up TI8168 SD boot minimal build for PCIE endpoint..." ; \
 	elif [ "$(findstring _sd,$@)" ] ; then \
 		echo "#define CONFIG_SYS_NO_FLASH"    >>$(obj)include/config.h ; \
 		echo "#define CONFIG_MMC_ENV"    >>$(obj)include/config.h ; \
diff --git a/src/arch/arm/cpu/arm_cortexa8/ti81xx/Makefile b/src/arch/arm/cpu/arm_cortexa8/ti81xx/Makefile
index 82f6173..7550225 100644
--- a/src/arch/arm/cpu/arm_cortexa8/ti81xx/Makefile
+++ b/src/arch/arm/cpu/arm_cortexa8/ti81xx/Makefile
@@ -26,6 +26,7 @@ COBJS	+= timer.o
 COBJS	+= syslib.o
 COBJS	+= sys_info.o
 
+COBJS-$(CONFIG_TI81XX_PCIE_ENDPOINT)	+= pcie.o
 COBJS-$(CONFIG_NAND_TI81XX)	+= elm.o
 
 SRCS	:= $(SOBJS:.o=.S) $(COBJS:.o=.c)
diff --git a/src/arch/arm/cpu/arm_cortexa8/ti81xx/pcie.c b/src/arch/arm/cpu/arm_cortexa8/ti81xx/pcie.c
new file mode 100644
index 0000000..ef6d7ea
--- /dev/null
+++ b/src/arch/arm/cpu/arm_cortexa8/ti81xx/pcie.c
@@ -0,0 +1,547 @@
+/*
+ * copyright (c) 2012, texas instruments, incorporated
+ *
+ * see file credits for list of people who contributed to this
+ * project.
+ *
+ * this program is free software; you can redistribute it and/or
+ * modify it under the terms of the gnu general public license as
+ * published by the free software foundation version 2.
+ *
+ * this program is distributed "as is" without any warranty of any
+ * kind, whether express or implied; without even the implied warranty
+ * of merchantability or fitness for a particular purpose.  see the
+ * gnu general public license for more details.
+ */
+
+#include <common.h>
+#define TI81XX_PCIE_DBG
+#define CONFIG_TI81XX_PCIE_32 1
+
+#include <asm/arch/pcie.h>
+
+/*
+ *  Application Register Offsets
+ */
+#define PCISTATSET                      0x010
+#define CMD_STATUS                      0x004
+#define CFG_SETUP                       0x008
+#define IOBASE                          0x00c
+#define OB_SIZE                         0x030
+#define MSI_IRQ                         0x054
+#define GPR0                            0x70
+#define OB_OFFSET_INDEX(n)              (0x200 + (8 * n))     /* 32 Registers */
+#define OB_OFFSET_HI(n)                 (0x204 + (8 * n))     /* 32 Registers */
+#define IB_BAR0                         0x300
+#define IB_START0_LO                    0x304
+#define IB_START0_HI                    0x308
+#define IB_OFFSET0                      0x30c
+#define ERR_IRQ_STATUS_RAW              0x1c0
+#define ERR_IRQ_STATUS                  0x1c4
+#define MSI0_IRQ_STATUS                 0x104
+#define MSI0_IRQ_ENABLE_SET             0x108
+#define MSI0_IRQ_ENABLE_CLR             0x10c
+#define IRQ_ENABLE_SET                  0x188
+#define IRQ_ENABLE_CLR                  0x18c
+
+/*
+ * PCIe Config Register Offsets (capabilities)
+ */
+#define LINK_CAP                        0x07c
+
+/* BAR mem width related registers */
+
+#define BAR_NONPREF_32BIT       0x0
+#define BAR_PREF_32BIT          0x8
+#define BAR_NONPREF_64BIT       0x4
+#define BAR_PREF_64BIT          0xC
+
+/*
+ * PCIe Config Register Offsets (misc)
+ */
+#define PL_LINK_CTRL                    0x710
+#define DEBUG0                          0x728
+#define PL_GEN2                         0x80c
+
+/* Application command register values */
+#define DBI_CS2_EN_VAL                  BIT(5)
+#define IB_XLAT_EN_VAL                  BIT(2)
+#define OB_XLAT_EN_VAL                  BIT(1)
+#define LTSSM_EN_VAL                    BIT(0)
+
+/* Link training encodings as indicated in DEBUG0 register */
+#define LTSSM_STATE_MASK                0x1f
+#define LTSSM_STATE_L0                  0x11
+
+#define LTSSM_PART_LCTRL_MASK           0xf0000000
+
+/* Directed Speed Change */
+#define DIR_SPD                         (1 << 17)
+
+static unsigned int bootflag;
+
+static unsigned int wdt_base;
+static unsigned int wdt_reload;
+static unsigned int trig;
+
+static inline int app_retry_enable(void)
+{
+	write_pcie_appl_reg(CMD_STATUS,
+			read_pcie_appl_reg(CMD_STATUS) | (1 << 4));
+	return 0;
+}
+
+static inline int app_retry_disable(void)
+{
+	write_pcie_appl_reg(CMD_STATUS,
+			read_pcie_appl_reg(CMD_STATUS) & (~(1 << 4)));
+	return 0;
+}
+
+int set_basic_config(void)
+{
+	/* set magic no */
+	// write_pcie_appl_reg(GPR0, MAGIC_NO);
+	write_pcie_appl_reg(GPR0, 0x02);
+
+	DEBUGF("%s:%d: reg:%08x val:%08x  ID\n", __FUNCTION__, __LINE__, TI81XX_PCIE_BASE + GPR0, 0x2);
+
+	/* set class code */
+	write_pcie_lcfg_reg(CLSCODE_REVID, 0x04000001);
+
+	DEBUGF("%s:%d: reg:%08x val:%08x class code\n", __FUNCTION__, __LINE__, TI81XX_PCIE_BASE + SPACE0_LOCAL_CFG_OFFSET + CLSCODE_REVID, 0x04000001);
+	return 0;
+}
+
+int enable_dbi_cs2(void)
+{
+
+	write_pcie_appl_reg(CMD_STATUS,
+			read_pcie_appl_reg(CMD_STATUS) | (1 << 5));
+
+	while ((read_pcie_appl_reg(CMD_STATUS) & (1 << 5)) == 0)
+		;
+
+	return 0;
+}
+
+int disable_dbi_cs2(void)
+{
+	write_pcie_appl_reg(CMD_STATUS,
+			read_pcie_appl_reg(CMD_STATUS) & (~(1 << 5)));
+
+	return 0;
+}
+
+int config_appl_regs(void)
+{
+	/*
+	 * Enable inbound translation --
+	 *  by default BAR 0 is for appl registers , rest of inbound config can
+	 *  be set by drivers
+	 */
+	write_pcie_appl_reg(CMD_STATUS,
+			read_pcie_appl_reg(CMD_STATUS) | (1 << 2));
+
+	return 0;
+}
+
+void set_ti81xx_device_id(void)
+{	unsigned int devid;
+	devid = get_ti81xx_device_id();
+	devid = ((unsigned int)(TI81XX_VENDORID  | devid << 16));
+	write_pcie_lcfg_reg(VENDOR_DEVICE_ID, devid);
+
+	DEBUGF("%s:%d: reg:%08x val:%08x\n", __FUNCTION__, __LINE__, TI81XX_PCIE_BASE + SPACE0_LOCAL_CFG_OFFSET + VENDOR_DEVICE_ID, devid);
+}
+
+
+static inline unsigned int read_reg_bits(unsigned int a, unsigned int mask)
+{
+	unsigned int val;
+	val = read_reg(a);
+	val &= mask;
+	val >>= ffs(mask);
+	return val;
+}
+
+static inline void write_reg_bits(unsigned int a, unsigned int v,
+		unsigned int mask)
+{
+	unsigned int val;
+	val = read_reg(a);
+	val = (val & ~mask) | ((v << ffs(mask)) & mask);
+	__raw_writel(val, a);
+}
+
+#ifdef TI81XX_NO_PIN_GPMC
+void set_size_config_64(int *bar_enable_mask)
+{
+	write_pcie_lcfg_reg(BAR0, SIZE_4KB);
+	write_pcie_lcfg_reg(BAR1, DISABLE);
+	write_pcie_lcfg_reg(BAR3, DISABLE);
+	write_pcie_lcfg_reg(BAR5, DISABLE);
+	*bar_enable_mask |= (1 << 0);
+	if (CONFIG_BAR_SIZE(CONFIG_REG2_64)) {
+		write_pcie_lcfg_reg(BAR2, CONFIG_BAR_SIZE(CONFIG_REG2_64));
+		*bar_enable_mask |= (1 << 2);
+	} else
+		write_pcie_lcfg_reg(BAR2, CONFIG_BAR_SIZE(CONFIG_REG2_64));
+
+	if (CONFIG_BAR_SIZE(CONFIG_REG4_64)) {
+		write_pcie_lcfg_reg(BAR4, CONFIG_BAR_SIZE(CONFIG_REG4_64));
+		*bar_enable_mask |= (1 << 4);
+	} else
+		write_pcie_lcfg_reg(BAR4, CONFIG_BAR_SIZE(CONFIG_REG4_64));
+}
+
+void set_size_config_32(int *bar_enable_mask)
+{
+	write_pcie_lcfg_reg(BAR0, SIZE_4KB);
+	write_pcie_lcfg_reg(BAR5, DISABLE);
+	*bar_enable_mask |= (1 << 0);
+	if (CONFIG_BAR_SIZE(CONFIG_BAR1_32)) {
+		write_pcie_lcfg_reg(BAR1, CONFIG_BAR_SIZE(CONFIG_BAR1_32));
+		*bar_enable_mask |= (1 << 1);
+	} else
+		write_pcie_lcfg_reg(BAR1, CONFIG_BAR_SIZE(CONFIG_BAR1_32));
+	if (CONFIG_BAR_SIZE(CONFIG_BAR2_32)) {
+		write_pcie_lcfg_reg(BAR2, CONFIG_BAR_SIZE(CONFIG_BAR2_32));
+		*bar_enable_mask |= (1 << 2);
+	} else
+		write_pcie_lcfg_reg(BAR2, CONFIG_BAR_SIZE(CONFIG_BAR2_32));
+	if (CONFIG_BAR_SIZE(CONFIG_BAR3_32)) {
+		write_pcie_lcfg_reg(BAR3, CONFIG_BAR_SIZE(CONFIG_BAR3_32));
+		*bar_enable_mask |= (1 << 3);
+	} else
+		write_pcie_lcfg_reg(BAR3, CONFIG_BAR_SIZE(CONFIG_BAR3_32));
+	if (CONFIG_BAR_SIZE(CONFIG_BAR4_32)) {
+		write_pcie_lcfg_reg(BAR4, CONFIG_BAR_SIZE(CONFIG_BAR4_32));
+		*bar_enable_mask |= (1 << 4);
+	} else
+		write_pcie_lcfg_reg(BAR4, CONFIG_BAR_SIZE(CONFIG_BAR4_32));
+}
+
+#else
+
+void set_size_pin_64(unsigned long long *size)
+{	/* DISABLE stands for 0*/
+	write_pcie_lcfg_reg(BAR0, size[0]);
+	write_pcie_lcfg_reg(BAR1, DISABLE);
+	write_pcie_lcfg_reg(BAR2, size[2]);
+	write_pcie_lcfg_reg(BAR3, DISABLE);
+	write_pcie_lcfg_reg(BAR4, size[4]);
+	write_pcie_lcfg_reg(BAR5, DISABLE);
+}
+
+void set_size_pin_32(unsigned long long *size)
+{
+	write_pcie_lcfg_reg(BAR0, size[0]);
+	write_pcie_lcfg_reg(BAR1, size[1]);
+	write_pcie_lcfg_reg(BAR2, size[2]);
+	write_pcie_lcfg_reg(BAR3, size[3]);
+	write_pcie_lcfg_reg(BAR4, size[4]);
+	write_pcie_lcfg_reg(BAR5, DISABLE);
+}
+#endif
+void set_bar_config_32(int *bar_enable_mask)
+{
+	/* BAR0 & BAR1 are always enabled, BAR0 hardwired to appl space */
+	write_pcie_lcfg_reg(BAR0, BAR_NONPREF_32BIT);
+	write_pcie_lcfg_reg(BAR1, BAR_PREF_32BIT);
+	if (*bar_enable_mask & (1 << 2))
+		write_pcie_lcfg_reg(BAR2, BAR_PREF_32BIT);
+	else
+		write_pcie_lcfg_reg(BAR2, BAR_NONPREF_32BIT);
+
+	if (*bar_enable_mask & (1 << 3))
+		write_pcie_lcfg_reg(BAR3, BAR_PREF_32BIT);
+	else
+		write_pcie_lcfg_reg(BAR3, BAR_NONPREF_32BIT);
+
+	if (*bar_enable_mask & (1 << 4))
+		write_pcie_lcfg_reg(BAR4, BAR_PREF_32BIT);
+	else
+		write_pcie_lcfg_reg(BAR4, BAR_NONPREF_32BIT);
+
+	/* BAR5 always kept disabled */
+}
+
+void set_bar_config_64(int *bar_enable_mask)
+{
+	write_pcie_lcfg_reg(BAR0, BAR_NONPREF_64BIT);
+	if (*bar_enable_mask & (1 << 2))
+		write_pcie_lcfg_reg(BAR2, BAR_PREF_64BIT);
+	else
+		write_pcie_lcfg_reg(BAR2, BAR_NONPREF_64BIT);
+	if (*bar_enable_mask & (1 << 4))
+		write_pcie_lcfg_reg(BAR4, BAR_PREF_64BIT);
+	else
+		write_pcie_lcfg_reg(BAR4, BAR_NONPREF_64BIT);
+}
+
+/**
+ * Should be called only for devices which have x1 link or for debug purpose.
+ */
+void config_force_x1(void)
+{
+	u32 val;
+
+	val = read_pcie_lcfg_reg(LINK_CAP);
+	val = (val & ~(0x3f << 4)) | (1 << 4);
+	write_pcie_lcfg_reg(LINK_CAP, val);
+
+	val = read_pcie_lcfg_reg(PL_GEN2);
+	val = (val & ~(0xff << 8)) | (1 << 8);
+	write_pcie_lcfg_reg(PL_GEN2, val);
+
+	val = read_pcie_lcfg_reg(PL_LINK_CTRL);
+	val = (val & ~(0x3F << 16)) | (1 << 16);
+	write_pcie_lcfg_reg(PL_LINK_CTRL, val);
+}
+
+void install_exceptions(void)
+{
+	/* Install the exception vectors and hook them */
+	asm ("mcr p15, 0, %0, c7, c5, 0" : : "r" (0));
+
+	__raw_writel(0x40300000, 0x4031d030);
+	__raw_writel(0xE3A00312, 0x40300000);
+	__raw_writel(0xE3800706, 0x40300004);
+	__raw_writel(0xE38000A0, 0x40300008);
+	__raw_writel(0xE3A01002, 0x4030000C);
+	__raw_writel(0xE5801000, 0x40300010);
+}
+
+void wdt_set_reload(unsigned int base, unsigned int reload)
+{
+	if (base)
+		__raw_writel(reload, base + 0x2C);
+}
+
+void wdt_load_start(unsigned int base, unsigned int load)
+{
+	if (base) {
+		__raw_writel(load, base + 0x30);
+		__raw_writel(0xbbbb, base + 0x48);
+
+		while (__raw_readl(base + 0x34) != 0x0)
+			;
+
+		__raw_writel(0x4444, base + 0x48);
+
+		while (__raw_readl(base + 0x34) != 0x0)
+			;
+	}
+}
+
+void wdt_stop(unsigned int base)
+{
+	if (base) {
+		__raw_writel(0xaaaa, base + 0x48);
+
+		while (__raw_readl(base + 0x34) != 0x0)
+			;
+
+		__raw_writel(0x5555, base + 0x48);
+
+		while (__raw_readl(base + 0x34) != 0x0)
+			;
+	}
+}
+
+void pcie_enable_link(void)
+{
+	unsigned int debug0;
+	wdt_load_start(wdt_base, trig++);
+
+	/* Enable LTSSM */
+	__raw_writel(__raw_readl(0x51000004) | 0xb01, 0x51000004);
+	DEBUGF("LTTSM enabled\n");
+
+	while (1) {
+		debug0 = __raw_readl(0x51001728);
+
+		if ((debug0 & LTSSM_STATE_MASK) == LTSSM_STATE_L0)
+			break;
+		DEBUGF("\nDebug0 = %#x, Debug1 = #%x",
+				debug0, __raw_readl(0x5100172C));
+	}
+	wdt_stop(wdt_base);
+
+	/* Disable application retry now that we have link up */
+	app_retry_disable();
+	DEBUGF("\napp_retry_disable() done\n");
+
+	printf("PCIe link UP, waiting for boot from HOST...\n");
+}
+
+void wait_for_host(void)
+{
+	unsigned int debug0;
+	while (1) {
+		if (__raw_readl(bootflag) != 0) {
+			DEBUGF("data tranfer happened\n");
+			break;
+		}
+		DEBUGF("waiting for data transfer\t");
+
+		debug0 = __raw_readl(0x51001728);
+#ifdef DEBUG_LTSSM
+		DEBUGF("\tD0: %#x\tD1 %#x\n", debug0, __raw_readl(0x5100172C));
+#endif
+
+		__asm__("dmb");
+	}
+
+	__raw_writel(0, bootflag);
+	printf("\t---> boot command received, proceed to auto boot...\n");
+}
+
+static void pcie_setup_ep(void)
+{
+    /* Set "Application Request Retry Enable" while we configure EP.
+     * (CMD_STATUS) */
+    __raw_writel(__raw_readl(0x51000004) | (1 << 4), 0x51000004);
+
+    /* Set vendor & device ID. (VENDOR_DEVICE_ID) */
+    // __raw_writel(0x104C | (0xB801 << 16), 0x51001000);
+    set_ti81xx_device_id();
+
+    /* Enable device for memory accesses. (STATUS_COMMAND) */
+    __raw_writel(__raw_readl(0x51001004) | (1 << 1), 0x51001004);
+
+    /* Set CLASSCODE. (CLASSCODE_REVID) */
+    // __raw_writel(0x04000001, 0x51001008);
+	set_basic_config();
+
+    /* Disable 64-bit MSI capability. */
+    __raw_writel(__raw_readl(0x51001050) & ~(1 << 23), 0x51001050);
+
+	DEBUGF("%s:%d: Disable 64-bit MSI capability \n", __FUNCTION__, __LINE__);
+	DEBUGF("%s:%d: MSI_CAP: %08x \n", __FUNCTION__, __LINE__, __raw_readl(0x51001050));
+
+    /* Enable DBI_CS2 - allows BAR mask setup. (CMD_STATUS) */
+    __raw_writel(__raw_readl(0x51000004) | (1 << 5), 0x51000004);
+    while((__raw_readl(0x51000004) & (1 << 5)) == 0);
+	DEBUGF("%s:%d: Enable DBI_CS2 - allows BAR mask setup. \n", __FUNCTION__, __LINE__);
+
+    /* Set BAR masks prior to enumeration by RC. */
+    __raw_writel(0x00000FFF, 0x51001010);  /* BAR0: 4 KiB */
+    __raw_writel(0x00007FFF, 0x51001014);  /* BAR1: 32 KiB */
+    __raw_writel(0x007FFFFF, 0x51001018);  /* BAR2: 4MB   */
+    __raw_writel(0x00000000, 0x5100101C);  /* BAR3: disabled */
+    __raw_writel(0x00000000, 0x51001020);  /* BAR4: disabled */
+    __raw_writel(0x00000000, 0x51001024);  /* BAR5: disabled */
+
+    /* Disable DBI_CS2. (CMD_STATUS) */
+    __raw_writel(__raw_readl(0x51000004) & ~(1 << 5), 0x51000004);
+    /* Set BAR access type and attributes after DBI_CS2 disable. */
+    __raw_writel(0x00000000, 0x51001010);  /* BAR0: 32-bit, !pre-fetch */
+    __raw_writel(0x00000000, 0x51001014);  /* BAR1: 32-bit, !pre-fetch */
+    __raw_writel(0x00000000, 0x51001018);  /* BAR2: 32-bit, !pre-fetch */
+    __raw_writel(0x00000000, 0x5100101C);  /* BAR3: disabled */
+    __raw_writel(0x00000000, 0x51001020);  /* BAR4: disabled */
+    __raw_writel(0x00000000, 0x51001024);  /* BAR5: disabled */
+    /* Disable (skip over) exposing power management capabilities.
+     *
+     * Host system BIOS will place card into the D3 power state upon system
+     * boot.  This results in the card not showing up in Windows - generally
+     * considered a BadThing.  In order to avoid this unhappy state of affairs,
+     * we're removing the PM capabilities entry from the extended configuration
+     * section of the Local Configuration registers by pointing to the
+     * descriptor immediately thereafter.
+     */
+    __raw_writel(0x00000050, 0x51001034);
+    /* Enable [in/out]-bound address translation. (CMD_STATUS) */
+    __raw_writel(__raw_readl(0x51000004) | (3 << 1), 0x51000004);
+    /* Disable legacy (inbound), enable MSI (inbound), interrupts. */
+    __raw_writel(0x0000000F, 0x5100018C);  /* IRQ_ENABLE_CLR */
+    __raw_writel(0xFFFFFFFF, 0x51000108);  /* MSI0_IRQ_ENABLE_SET */
+    __raw_writel(__raw_readl(0x51001050) | (1 << 16), 0x51001050);
+#if 0  /* Support for "Disable INTx" is PCI 2.3 or later. */
+    __raw_writel(__raw_readl(0x51001004) | (1 << 10), 0x51001004);
+#endif
+    /* Set x1 mode: LINK_CAP, PL_GEN2 & PL_LINK_CTRL */
+    __raw_writel((__raw_readl(0x5100107C) & ~(0x3F <<  4)) | (1 <<  4), 0x5100107C);
+    __raw_writel((__raw_readl(0x5100180C) & ~(0xFF <<  8)) | (1 <<  8), 0x5100180C);
+    __raw_writel((__raw_readl(0x51001710) & ~(0x3F << 16)) | (1 << 16), 0x5100180C);
+} 
+
+int pcie_init(void)
+{
+	int bar_enable_mask = 0;
+#ifndef TI81XX_NO_PIN_GPMC
+	unsigned long long bar_size[6] = {0};
+#endif
+
+	trig = 1;
+	// get_pcie_wdt_base_reload(&wdt_base, &wdt_reload);
+	// wdt_set_reload(wdt_base, wdt_reload);
+
+	// bootflag = (unsigned int) get_bootflag_addr();
+	// __raw_writel(0, bootflag);
+
+	pcie_hw_setup();
+	pcie_pll_setup();
+	pcie_enable_module();
+#if 0	
+	app_retry_enable();
+	DEBUGF("app_retry_enable() done\n");
+	set_basic_config();
+	DEBUGF("set basic config() done\n");
+
+	write_pcie_lcfg_reg_bits(STATUS_COMMAND,
+			CFG_REG_CMD_STATUS_MEM_SPACE_ENB,
+			CFG_REG_CMD_STATUS_MEM_SPACE);
+	enable_dbi_cs2();
+	set_ti81xx_device_id();
+#ifdef CONFIG_TI81XX_PCIE_32
+#ifdef TI81XX_NO_PIN_GPMC
+	set_size_config_32(&bar_enable_mask);
+#else
+	get_size_boot_mode_pin_32(&bar_enable_mask, bar_size);
+	set_size_pin_32(bar_size);
+#endif
+#endif
+
+#ifdef CONFIG_TI81XX_PCIE_64
+#ifdef TI81XX_NO_PIN_GPMC
+	set_size_config_64(&bar_enable_mask);
+#else
+	get_size_boot_mode_pin_64(&bar_enable_mask, bar_size);
+	set_size_pin_64(bar_size);
+#endif
+#endif
+
+	DEBUGF("set_bar_size() done\n");
+	disable_dbi_cs2();
+	DEBUGF("disable_dbi_cs2() done\n");
+#ifdef CONFIG_TI81XX_PCIE_32
+	set_bar_config_32(&bar_enable_mask);
+#endif
+
+#ifdef CONFIG_TI81XX_PCIE_64
+	set_bar_config_64(&bar_enable_mask);
+#endif
+
+	DEBUGF("set_bar_config() done\n");
+	config_appl_regs();
+	DEBUGF("config_appl_regs() done\n");
+	if (get_ti81xx_device_id() == TI8148_DEVICEID) {
+		config_force_x1();      /* Not for TI816X */
+		DEBUGF("config_force_x1() done\n");
+	}
+	// pcie_enable_link();
+	// install_exceptions();
+	// wait_for_host();
+#else
+	pcie_setup_ep();
+
+    /* Enable LTSSM. (CMD_STATUS) */
+    __raw_writel(__raw_readl(0x51000004) | 0x00000B01, 0x51000004);
+    /* EP configuration done, disable app retry. (CMD_STATUS) */
+    __raw_writel(__raw_readl(0x51000004) & ~(1 << 4), 0x51000004); 
+#endif	
+	return 0;
+}
diff --git a/src/arch/arm/include/asm/arch-ti81xx/ddr_defs_ti816x.h b/src/arch/arm/include/asm/arch-ti81xx/ddr_defs_ti816x.h
index 0f5281c..b3f3cd8 100644
--- a/src/arch/arm/include/asm/arch-ti81xx/ddr_defs_ti816x.h
+++ b/src/arch/arm/include/asm/arch-ti81xx/ddr_defs_ti816x.h
@@ -229,18 +229,33 @@
 
 /* For 796 MHz */
 #if defined(CONFIG_TI816X_DDR3_796)
-#define EMIF_TIM1   0x1779C9FE
+// valores por defecto
+/*#define EMIF_TIM1   0x1779C9FE
 #define EMIF_TIM2   0x50608074
 #define EMIF_TIM3   0x009F857F
 #define EMIF_SDREF  0x10001841
 #define EMIF_SDCFG  0x62A73832
-#define EMIF_PHYCFG 0x00000110
+#define EMIF_PHYCFG 0x00000110*/
+
+//kit ideatel
+#define EMIF_TIM1   0x1779C9FE
+#define EMIF_TIM2   0x50877FF3
+#define EMIF_TIM3   0x001F87FF
+#define EMIF_SDREF  0x10001841
+#define EMIF_SDCFG  0x62A73832
+#define EMIF_PHYCFG 0x00100110
 
 #if defined(CONFIG_TI816X_DDR3_SW_LEVELING)
 /* These values are obtained from the CCS app */
-#define RD_DQS_GATE	((emif == 0) ? 0x1B3 : 0x1B3)
+// valores por defecto
+/*#define RD_DQS_GATE	((emif == 0) ? 0x1B3 : 0x1B3)
 #define RD_DQS		((emif == 0) ? 0x35 : 0x35)
-#define WR_DQS		((emif == 0) ? 0x93 : 0x93)
+#define WR_DQS		((emif == 0) ? 0x93 : 0x93)*/
+
+// kit ideatel
+#define RD_DQS_GATE	((emif == 0) ? 0x13F : 0x134)
+#define RD_DQS		((emif == 0) ? 0x37 : 0x37)
+#define WR_DQS		((emif == 0) ? 0x89 : 0x89)
 
 #endif
 
diff --git a/src/arch/arm/include/asm/arch-ti81xx/pcie.h b/src/arch/arm/include/asm/arch-ti81xx/pcie.h
new file mode 100644
index 0000000..611c36d
--- /dev/null
+++ b/src/arch/arm/include/asm/arch-ti81xx/pcie.h
@@ -0,0 +1,248 @@
+/*
+ * Copyright (C) 2012, Texas Instruments, Incorporated
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation version 2.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef _TI81XX_PCIE_COMMON_
+#define _TI81XX_PCIE_COMMON_
+
+#include <asm/io.h>
+
+#ifdef TI81XX_PCIE_DBG
+#define DEBUGF(fmt, ...) \
+	printf(fmt, ##__VA_ARGS__)
+#else
+#define DEBUGF(fmt, ...) \
+	({ if (0) printf(fmt, ##__VA_ARGS__); })
+#endif
+
+/*
+ * Bar sizes can be decided on two basis:
+ * 1 - CONFIG_MACROS defined below
+ * 2 - GPMC pin settings
+ * if config macros are present then they will be prefered over pin
+ * settings and pin setting in this  case will  have no effect over
+ * bar sizes. if config macro are not present then pin setting will
+ * be considered for bar sizes.
+ */
+/* CONFIG MACROS for bar size */
+/* In case of 32 bit PCIE settings
+ * BAR(n)-- Region(n) referring same thing
+ * BAR1 -- Region 1
+ * BAR2 -- Region 2
+ * BAR3 -- region 3
+ * BAR4 -- region 4
+ * BAR5 -- Region 5
+ * In case of 64 bit PCIE settings
+ * BAR(n+1):BAR(n) : Region(n) n-- 0,2,4
+ * [BAR1 : BAR0] : Region 0
+ * [BAR3 : BAR2] : Region 2
+ * [BAR5 : BAR4] : Region 4
+ * Region0 and BAR0 will always be 4KB
+ */
+
+#define TI81XX_NO_PIN_GPMC /* commnet this Macro to use GPMC pin setting */
+#ifdef TI81XX_NO_PIN_GPMC
+
+#ifndef CONFIG_BAR1_32
+#define CONFIG_BAR1_32  (0x800000ULL)   /* enter size in bytes */
+#endif
+
+#ifndef CONFIG_BAR2_32
+#define CONFIG_BAR2_32  (0x800000ULL)  /* enter size in bytes */
+#endif
+
+#ifndef CONFIG_BAR3_32
+#define CONFIG_BAR3_32  (0xfffULL)  /* enter size in bytes */
+#endif
+
+#ifndef CONFIG_BAR4_32
+#define CONFIG_BAR4_32  (0x1001ULL)  /* enter size in bytes */
+#endif
+
+#ifndef CONFIG_REG2_64
+#define CONFIG_REG2_64  (0x1000000ULL)  /* enter size in bytes */
+#endif
+
+#ifndef CONFIG_REG4_64
+#define CONFIG_REG4_64  (0x1000000ULL)  /* enter size in bytes */
+#endif
+
+/*
+ * TODO: Replace these max and min bar sizes according to PCIE spec
+ */
+
+/* Maximum size will be trucated according to PCIE specs*/
+#define MAX_BAR_SIZE    (0x40000000ULL)
+/* Alignment on base of min bar size  according to PCIE specs*/
+#define MIN_BAR_SIZE    (0x1000ULL)
+
+/* Generalized Macro for BAR size settings */
+#define CONFIG_BAR_SIZE(SIZE)   \
+	((SIZE > MAX_BAR_SIZE) ? (MAX_BAR_SIZE - 1) : \
+	 ((SIZE % MIN_BAR_SIZE) ? \
+	  ((SIZE / MIN_BAR_SIZE + 1) * MIN_BAR_SIZE - 1) : \
+	  (SIZE ? SIZE - 1 : 0)))
+#endif
+
+#define TI81XX_VENDORID         ((unsigned int)0x104C)
+#define TI8168_DEVICEID         ((unsigned int)0xB800)
+#define TI8148_DEVICEID         ((unsigned int)0xB801)
+#define TI813X_DEVICEID         ((unsigned int)0xB802)
+
+#define MAGIC_NO                0x10101010
+
+#define TI81XX_PCIE_BASE                0x51000000
+#define TI81XX_CONTROL_BASE             0x48140000
+
+#define read_pcie_appl_reg(offset)      \
+	read_reg(TI81XX_PCIE_BASE + offset)
+
+#define write_pcie_appl_reg(offset, v)  \
+	write_reg(TI81XX_PCIE_BASE + offset, v)
+#define read_pcie_appl_reg_bits(offset, mask)   \
+	read_reg_bits(TI81XX_PCIE_BASE + offset, mask)
+
+#define write_pcie_appl_reg_bits(offset, v, mask)       \
+	write_reg(TI81XX_PCIE_BASE + offset, v, mask)
+
+#define read_pcie_lcfg_reg(offset)      \
+	read_reg(TI81XX_PCIE_BASE + SPACE0_LOCAL_CFG_OFFSET + offset)
+
+#define write_pcie_lcfg_reg(offset, v)  \
+	write_reg(TI81XX_PCIE_BASE + SPACE0_LOCAL_CFG_OFFSET + offset, v)
+
+#define read_pcie_lcfg_reg_bits(offset, mask)   \
+	read_reg_bits(TI81XX_PCIE_BASE + SPACE0_LOCAL_CFG_OFFSET + offset, mask)
+
+#define write_pcie_lcfg_reg_bits(offset, v, mask)                       \
+	write_reg_bits(TI81XX_PCIE_BASE + SPACE0_LOCAL_CFG_OFFSET       \
+			+ offset, v, mask)
+#define DEBUG_LTSSM
+
+/* Entry function for PCIe setup - defined in common pcie.c */
+int pcie_init(void);
+
+/* these register at offset 0x1000 from PCIE_BASE */
+#define VENDOR_DEVICE_ID                0x0
+#define STATUS_COMMAND                  0x4
+#define CLSCODE_REVID                   0x8
+#define BAR0                            0x10
+#define BAR1                            0x14
+#define BAR2                            0x18
+#define BAR3                            0x1c
+#define BAR4                            0x20
+#define BAR5                            0x24
+
+/* Various regions in PCIESS address space */
+#define SPACE0_LOCAL_CFG_OFFSET         0x1000
+#define SPACE0_REMOTE_CFG_OFFSET        0x2000
+#define SPACE0_IO_OFFSET                0x3000
+
+/* bar size and mask */
+#define DISABLE         0x0
+#define SIZE_4KB        0x00000FFF
+#define SIZE_8MB        0x007FFFFF
+#define SIZE_16MB       0x00FFFFFF
+#define SIZE_32MB       0x01FFFFFF
+#define SIZE_64MB       0x03FFFFFF
+#define SIZE_128MB      0x07FFFFFF
+#define SIZE_256MB      0x0FFFFFFF
+#define SIZE_512MB      0x1FFFFFFF
+#define SIZE_1GB        0x3FFFFFFF
+#define SIZE_2GB        0x7FFFFFFF
+#define SIZE_4GB        0xFFFFFFFF
+
+#define CFG_REG_CMD_STATUS_MEM_SPACE_POS   1
+#define CFG_REG_CMD_STATUS_MEM_SPACE        \
+	(1 << CFG_REG_CMD_STATUS_MEM_SPACE_POS)
+#define CFG_REG_CMD_STATUS_MEM_SPACE_ENB   0x1
+
+
+struct boot_cfg {
+	unsigned char boot_dev_size;
+	unsigned char cs0_mux_dev;
+	unsigned char boot_wait_en;
+	unsigned char wait_select;
+};
+
+static inline unsigned int read_reg(unsigned int a)
+{
+	return __raw_readl(a);
+}
+
+static inline void write_reg(unsigned int a, unsigned int v)
+{
+	__raw_writel(v, a);
+}
+
+static inline void delay_loop(volatile int count)
+{
+	while (--count)
+		;
+}
+
+/* ----------------------------------------------------------------------------
+ * Functions that need to be implemented by platform specific code.
+ *	- These will be called at various times by PCIe core code.
+ * ----------------------------------------------------------------------------
+ */
+
+/**
+ * This function should be implemented to return the base address of watchdog
+ * timer to be used as PCIe watchdog as well as provide reload value for wdt
+ * expiry.
+ *
+ * A value NULL will mean that the PCIe code will not use watchdog and thus
+ * recovery from PCIe link and other error timeouts is not possible.
+ *
+ * The reload value should be tuned for particular platform so that it is as
+ * small to reseta quickly when in trouble but at the same time sufficient
+ * enough to allow execution of pcie setup and polling.
+ */
+void get_pcie_wdt_base_reload(unsigned int *base, unsigned int *reload);
+/**
+ * This function should be implemented to return address of bootflag
+ * u-boot polls on bootflag location to wiat for data transfer.
+ */
+void *get_bootflag_addr(void);
+/**
+ * This function should be implemented to initialize general details of PCIESS h/w.
+ * Example : mode of PCIESS.
+ */
+void pcie_hw_setup(void);
+/**
+ * This function should be implemented to initialize PCIE-PLL.
+ */
+void pcie_pll_setup(void);
+/**
+ * This function should be implemented to enable PCIESS and get it out of reset.
+ */
+void pcie_enable_module(void);
+/**
+ * This function should be implemented to get device id.
+ */
+unsigned int get_ti81xx_device_id(void);
+/**
+ * This function should be implemented to process GPMC pin config and get size
+ * to be set for BARS while PCIESS operating in 32 bit mode.
+ */
+void get_size_boot_mode_pin_32(int *, unsigned long long *);
+/**
+ * This function should be implemented toprocess GPMC pin config and get size to
+ * be set for regions while PCIESS operatiin in 64 bit mode.
+ */
+void get_size_boot_mode_pin_64(int *, unsigned long long *);
+
+#endif /* common  */
diff --git a/src/board/ti/ti8168/Makefile b/src/board/ti/ti8168/Makefile
index fc5a39c..8374a0e 100644
--- a/src/board/ti/ti8168/Makefile
+++ b/src/board/ti/ti8168/Makefile
@@ -18,7 +18,7 @@ include $(TOPDIR)/config.mk
 
 LIB	= $(obj)lib$(BOARD).a
 
-COBJS	:= evm.o
+COBJS	:= evm.o pcie.o
 
 SRCS	:= $(SOBJS:.o=.S) $(COBJS:.o=.c)
 OBJS	:= $(addprefix $(obj),$(COBJS))
diff --git a/src/board/ti/ti8168/evm.c b/src/board/ti/ti8168/evm.c
index e35173f..7cca977 100644
--- a/src/board/ti/ti8168/evm.c
+++ b/src/board/ti/ti8168/evm.c
@@ -923,6 +923,11 @@ static void ddr_pll_init_ti816x(u32 sil_index, u32 clk_index)
  ********************************************************/
 int misc_init_r (void)
 {
+#if defined(CONFIG_TI81XX_PCIE_ENDPOINT)
+	extern int pcie_init(void);
+	printf("\nSetting up for pcie endpoint...\n");
+	pcie_init();
+#endif
 	#ifdef CONFIG_TI816X_ASCIIART
 	int i = 0, j = 0;
 	char ti816x[23][79] = {
diff --git a/src/board/ti/ti8168/pcie.c b/src/board/ti/ti8168/pcie.c
new file mode 100644
index 0000000..2e1e908
--- /dev/null
+++ b/src/board/ti/ti8168/pcie.c
@@ -0,0 +1,242 @@
+/*
+ * copyright (c) 2012, texas instruments, incorporated
+ *
+ * see file credits for list of people who contributed to this
+ * project.
+ *
+ * this program is free software; you can redistribute it and/or
+ * modify it under the terms of the gnu general public license as
+ * published by the free software foundation version 2.
+ *
+ * this program is distributed "as is" without any warranty of any
+ * kind, whether express or implied; without even the implied warranty
+ * of merchantability or fitness for a particular purpose.  see the
+ * gnu general public license for more details.
+ */
+
+#include <common.h>
+#include <exports.h>
+#include <asm/arch/pcie.h>
+
+#ifdef CONFIG_TI81XX_PCIE_ENDPOINT
+
+/*
+ * OCMC location to communicate boot process
+ */
+#define TI816X_BOOTFLAG_ADDR                            0x4043FFFC
+#define PCIE_CFG					0x640
+
+#define CONTROL_STATUS                  0x40
+#define TI8168_BT_DEVSIZE_MASK          (0x00010000)
+#define BT_MSK_SHIFT                    16
+
+#define TI8168_CS0_DEVSIZE_MASK         (0x000c0000)
+#define CS0_MSK_SHIFT                   18
+
+#define TI8168_BTW_EN                   (0x00020000)
+#define BTW_EN_MSK_SHIFT                17
+
+
+
+
+struct boot_cfg g_pin_conf; /* to fetch gpmc pin config */
+
+int read_gpmc_pin_config(void)
+{
+	g_pin_conf.boot_dev_size = (unsigned char)
+		((read_reg(TI81XX_CONTROL_BASE +
+			   CONTROL_STATUS) &
+		  (TI8168_BT_DEVSIZE_MASK)) >>
+		 BT_MSK_SHIFT);
+
+	g_pin_conf.cs0_mux_dev = (unsigned char) ((read_reg(TI81XX_CONTROL_BASE
+					+ CONTROL_STATUS) &
+				(TI8168_CS0_DEVSIZE_MASK)) >>
+			CS0_MSK_SHIFT);
+
+	g_pin_conf.boot_wait_en = (unsigned char) ((read_reg(TI81XX_CONTROL_BASE
+					+ CONTROL_STATUS) & (TI8168_BTW_EN)) >>
+			BTW_EN_MSK_SHIFT);
+	return 0;
+}
+
+
+void get_size_boot_mode_pin_32(int *bar_enable_mask,
+		unsigned long long *bar_size)
+{
+	unsigned int bar2_pins, bar3_pins, bar4_pins;
+
+	/* Gather boot pin configurations */
+	read_gpmc_pin_config();
+
+	bar2_pins = g_pin_conf.boot_dev_size;
+	bar3_pins = g_pin_conf.cs0_mux_dev;
+	bar4_pins = g_pin_conf.boot_wait_en;
+	bar_size[0] = SIZE_4KB;
+	bar_size[1] = SIZE_8MB;
+	bar_size[5] = DISABLE;
+	*bar_enable_mask |= (1 << 0);
+	*bar_enable_mask |= (1 << 1);
+
+	switch (bar2_pins) {
+	case 0:
+		bar_size[2] = DISABLE;
+	break;
+	case 1:
+		bar_size[2] = SIZE_8MB;
+		*bar_enable_mask |= (1 << 2);
+	break;
+	default:
+		bar_size[2] = DISABLE;
+	}
+
+	switch (bar3_pins) {
+	case 0:
+		bar_size[3] = DISABLE;
+	break;
+	case 1:
+		bar_size[3] = SIZE_64MB;
+		*bar_enable_mask |= (1 << 3);
+	break;
+	case 2:
+		bar_size[3] = SIZE_128MB;
+		*bar_enable_mask |= (1 << 3);
+	break;
+	case 3:
+		bar_size[3] = SIZE_256MB;
+		*bar_enable_mask |= (1 << 3);
+	break;
+	default:
+		bar_size[3] = DISABLE;
+	}
+
+	switch (bar4_pins) {
+	case 0:
+		bar_size[4] = DISABLE;
+	break;
+	case 1:
+		bar_size[4] = SIZE_256MB;
+		*bar_enable_mask |= (1 << 4);
+	break;
+	default:
+		bar_size[4] = DISABLE;
+	}
+}
+
+
+void get_size_boot_mode_pin_64(int *bar_enable_mask,
+		unsigned long long *bar_size)
+{
+	unsigned int reg2_pins, reg4_pins;
+
+	/* Gather boot pin configurations */
+	read_gpmc_pin_config();
+
+	reg2_pins = (g_pin_conf.boot_dev_size) |
+		((g_pin_conf.boot_wait_en) << 1);
+	reg4_pins = g_pin_conf.cs0_mux_dev;
+	bar_size[0] = SIZE_4KB;
+	*bar_enable_mask = (1 << 0); /* for region 0*/
+
+	switch (reg2_pins) {
+	case 0:
+		bar_size[2] = DISABLE;
+	break;
+	case 1:
+		bar_size[2] = SIZE_8MB;
+		*bar_enable_mask |= (1 << 2); /* for region 2*/
+	break;
+	case 2:
+		bar_size[2] = SIZE_64MB;
+		*bar_enable_mask |= (1 << 2);
+	break;
+	case 3:
+		bar_size[2] = SIZE_128MB;
+		*bar_enable_mask |= (1 << 2);
+	break;
+	default:
+		bar_size[2] = DISABLE;
+	}
+
+	switch (reg4_pins) {
+	case 0:
+		bar_size[4] = DISABLE;
+	break;
+	case 1:
+		bar_size[4] = SIZE_64MB;
+		*bar_enable_mask |= (1 << 4); /* for region 4*/
+	break;
+	case 2:
+		bar_size[4] = SIZE_128MB;
+		*bar_enable_mask |= (1 << 4);
+	break;
+	case 3:
+		bar_size[4] = SIZE_256MB;
+		*bar_enable_mask |= (1 << 4);
+	break;
+	default:
+		bar_size[4] = DISABLE;
+	}
+}
+
+inline unsigned int get_ti81xx_device_id(void)
+{
+	return TI8168_DEVICEID;
+}
+
+void pcie_pll_setup()
+{
+	int lock;
+	unsigned int reg = read_reg(TI81XX_CONTROL_BASE + PCIE_CFG);
+
+	/* PLL setup */
+	reg |= 0x01C90000;
+	write_reg(TI81XX_CONTROL_BASE + PCIE_CFG, reg);
+	
+	do {
+		lock = read_reg(TI81XX_CONTROL_BASE + PCIE_CFG) & (1 << 8);
+	} while (!lock);
+
+	delay_loop(100);
+	DEBUGF("***PLL locked\n");
+}
+
+void pcie_enable_module()
+{
+	DEBUGF("\nPRCM: begin PCIe setup\n");
+
+	/* Clockdomain enable */
+	write_reg(0x48180510, 2); /*CM_DEFAULT_PCI_CLKSTCTRL */
+
+	/* Clock enable */
+	write_reg(0x48180578, 2); /*CM_DEFAULT_PCI_CLKCTRL */
+
+	/* De-assert LRST */
+	write_reg(0x48180B10, read_reg(0x48180B10) & ~(1 << 7));
+
+	while ((read_reg(0x48180578) & (0x3 << 16)) != 0)
+		;
+
+	DEBUGF("\nPRCM: PCIe is out reset\n");
+}
+
+void *get_bootflag_addr()
+{
+	return (void *)TI816X_BOOTFLAG_ADDR;
+}
+
+void pcie_hw_setup(void)
+{
+	/* Set up Endpoint mode */
+	write_reg(TI81XX_CONTROL_BASE + PCIE_CFG, 0x0);
+
+}
+
+void get_pcie_wdt_base_reload(unsigned int *base, unsigned int *reload)
+{
+	*base = 0x480C2000;
+	*reload = 0Xffff8000;
+	/* time duration -- 1sec with 32 kHZ clock */
+}
+
+#endif /* CONFIG_TI81XX_PCIE_BOOT */
diff --git a/src/config.mk b/src/config.mk
index 25b195c..2a081e6 100644
--- a/src/config.mk
+++ b/src/config.mk
@@ -40,7 +40,7 @@ src :=
 endif
 
 # clean the slate ...
-PLATFORM_RELFLAGS =
+PLATFORM_RELFLAGS = $(EXTRA_CPPFLAGS)
 PLATFORM_CPPFLAGS =
 PLATFORM_LDFLAGS =
 
diff --git a/src/drivers/serial/ns16550.c b/src/drivers/serial/ns16550.c
index 2335751..5a93cad 100644
--- a/src/drivers/serial/ns16550.c
+++ b/src/drivers/serial/ns16550.c
@@ -11,8 +11,14 @@
 #include <asm/io.h>
 
 #define UART_LCRVAL UART_LCR_8N1		/* 8 data, 1 stop, no parity */
-#define UART_MCRVAL (UART_MCR_DTR | \
-		     UART_MCR_RTS)		/* RTS/DTR */
+
+#if defined(CONFIG_UART_NO) && CONFIG_UART_NO == 1
+	#define UART_MCRVAL (0)
+#else
+	#define UART_MCRVAL (UART_MCR_DTR | \
+	 		     UART_MCR_RTS)		/* RTS/DTR */
+#endif
+
 #define UART_FCRVAL (UART_FCR_FIFO_EN |	\
 		     UART_FCR_RXSR |	\
 		     UART_FCR_TXSR)		/* Clear & enable FIFOs */
diff --git a/src/include/configs/ti8168_evm.h b/src/include/configs/ti8168_evm.h
index 55fe49b..689fbcd 100644
--- a/src/include/configs/ti8168_evm.h
+++ b/src/include/configs/ti8168_evm.h
@@ -163,7 +163,18 @@
 #define CONFIG_SYS_NS16550_SERIAL
 #define CONFIG_SYS_NS16550_REG_SIZE	(-4)
 #define CONFIG_SYS_NS16550_CLK		(48000000)
-#define CONFIG_SYS_NS16550_COM1		0x48024000	/* Base EVM has UART2 */
+
+#if !defined(CONFIG_UART_NO)
+	#define CONFIG_SYS_NS16550_COM1		0x48024000	/* Base EVM has UART2 */
+#else
+	#if CONFIG_UART_NO == 0
+		#define CONFIG_SYS_NS16550_COM1		0x48020000	/* UART0 */
+	#elif CONFIG_UART_NO == 1
+		#define CONFIG_SYS_NS16550_COM1		0x48022000	/* UART1 */
+	#else
+		#error CONFIG_UART_NO specified not supported!
+	#endif
+#endif
 
 #define CONFIG_BAUDRATE		115200
 #define CONFIG_SYS_BAUDRATE_TABLE	{ 110, 300, 600, 1200, 2400, \
