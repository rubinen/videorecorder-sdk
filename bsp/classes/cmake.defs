#! \defgroup cmake_class CMake Class
#! \ingroup classes
#! \section intro Introduction
#! The CMake class provides logic for (cross)compiling CMake-based applications with the SDK.
#!
#! \section public_params Public Parameters
#! The following is a list of parameters that may be set according to an application's specific requirements.
#! <ul>
#! <li>
#! <b>CMAKE_PARAMS:</b> Extra values that may be passed to cmake as arguments.
#!
#! <li>
#! <b>CMAKE_BUILD_DIR:</b> The directory in which the build process will be executed.
#!
#! <li>
#! <b>CMAKE_SRC_DIR:</b> The directory that contains the configure script.
#! 
#! <li>
#! <b>CMAKE_INTERACTIVE_CONFIG:</b> If set to 'yes', ccmake will be used instead of cmake
#! 
#! \section p_params Private Parameters
#! The following is a list of private parameters that are recommended not to be modified.
#!
#! <ul>
#!
#! <li>
#! <b>CMAKE_TOOLCHAIN_FILE:</b> The file location corresponding to the CMake toolchain.
#! 
#! <li>
#! <b>CMAKE_INSTALL_PREFIX:</b> The installation prefix for cmake-based applications. By default this is set as FSDEV/usr/
#! 



.PHONY: update_flags clean_configure configuration cmake_clean cmake_build cmake_uninstall

CMAKE_BUILD_DIR?=$(ARCH)
CMAKE_SRC_DIR?=src
ifneq ($(MAKECMDGOALS),sim)
  CMAKE_TOOLCHAIN_FILE?=$(DEVDIR)/fs/toolchain.cmake
  TARGET_INSTALL_PREFIX?=/usr
  CMAKE_INSTALL_PREFIX?=$(FSDEVROOT)/$(TARGET_INSTALL_PREFIX)
else
  CMAKE_TOOLCHAIN_FILE?=$(DEVDIR)/fs/toolchain.sim.cmake
  TARGET_INSTALL_PREFIX?=$(SIMROOT)/usr
  CMAKE_INSTALL_PREFIX?=$(TARGET_INSTALL_PREFIX)
endif

CMAKE_INTERACTIVE_CONFIG?=n
ifeq ($(CMAKE_INTERACTIVE_CONFIG),yes)
  CMAKE_BINARY:=ccmake
else
  CMAKE_BINARY:=cmake
endif

export KERNELDIR

PATH:=$(shell dirname $(DEVDIR)/fs/apps/qt-*/$(ARCH)/bin/qmake):$(PATH)

cmake_build: rrfetched rrpatched cmake_built$(ARCH_SUFFIX)

$(CMAKE_TOOLCHAIN_FILE):
	$(V)$(MAKE) -C $(DEVDIR)/fs `basename $@`

cmake_built$(ARCH_SUFFIX): cmake_configured
	$(V) $(MAKE) -j $(BSP_NCPU) -C $(CMAKE_BUILD_DIR) $(if $(VERBOSE:1=),,V=1) $(QOUT) $(ERRQOUT)
	$(V) touch $@

cmake_clean: clean_configure unpatch
	$(V) rm -Rf cmake_built* cmake_installed*

cmake_install: cmake_installed$(ARCH_SUFFIX)

cmake_installed$(ARCH_SUFFIX):
	$(V) $(MAKE) -j $(BSP_NCPU) -C $(CMAKE_BUILD_DIR) install $(if $(VERBOSE:1=),,V=1) $(QOUT) $(ERRQOUT)
	$(V) touch $@

cmake_uninstall: cmake_uninstall_$(ARCH)

cmake_uninstall_$(ARCH):
	$(V) $(MAKE) -j $(BSP_NCPU) -C $(CMAKE_BUILD_DIR) uninstall $(if $(VERBOSE:1=),,V=1) $(QOUT) $(ERRQOUT)
	$(V) rm -f cmake_installed$(ARCH_SUFFIX)

FETCHER_EXTRACT_DIRECTORY_NAME=src
include $(CLASSES)/fetcher.defs

cmake_configured: $(CMAKE_TOOLCHAIN_FILE) cmake_is_configured$(ARCH_SUFFIX)

cmake_is_configured$(ARCH_SUFFIX):
	$(V) mkdir -p $(CMAKE_BUILD_DIR) && cd $(CMAKE_BUILD_DIR) && \
	export CFLAGS="$(APPS_CFLAGS)" && \
	export CXXFLAGS="$(APPS_CFLAGS)" && \
	export LDFLAGS="$(APPS_LDFLAGS)" && \
	$(CMAKE_BINARY) \
	    -DCMAKE_TOOLCHAIN_FILE=$(CMAKE_TOOLCHAIN_FILE) \
	    -DCMAKE_INSTALL_PREFIX=$(CMAKE_INSTALL_PREFIX) \
	    $(CMAKE_PARAMS) \
	    ../$(CMAKE_SRC_DIR) $(QOUT) $(ERRQOUT)
	$(V) touch $@
	
clean_configure: clean_configure_$(ARCH)

clean_configure_$(ARCH):
	$(V)rm -f cmake_is_configured$(ARCH_SUFFIX)
	$(V)if [ "$(CMAKE_BUILD_DIR)" != "src" ] ; then \
	    rm -Rf $(CMAKE_BUILD_DIR); \
	else \
	    if [ -f $(CMAKE_BUILD_DIR)/Makefile ] ; then \
	      $(MAKE) -C $(CMAKE_BUILD_DIR) distclean; \
	    fi \
	fi
