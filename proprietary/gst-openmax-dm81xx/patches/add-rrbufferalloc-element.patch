Index: gst-openmax-dm81xx/src/omx/Makefile.am
===================================================================
--- gst-openmax-dm81xx.orig/src/omx/Makefile.am	2013-01-28 12:08:17.000000000 -0600
+++ gst-openmax-dm81xx/src/omx/Makefile.am	2013-03-20 12:55:10.853281898 -0600
@@ -51,6 +51,7 @@
                swcsc.c swcsc.h \
                gstperf.c gstperf.h  \
                gstomxbufferalloc.c gstomxbufferalloc.h \
+               gstrrbufferalloc.c gstrrbufferalloc.h \
                gstomx_buffertransport.c gstomx_buffertransport.h \
                gstomx_base_vfpc.c gstomx_base_vfpc.h \
                gstomx_base_vfpc2.c gstomx_base_vfpc2.h \
Index: gst-openmax-dm81xx/src/omx/gstomx.c
===================================================================
--- gst-openmax-dm81xx.orig/src/omx/gstomx.c	2013-01-28 12:08:17.000000000 -0600
+++ gst-openmax-dm81xx/src/omx/gstomx.c	2013-03-20 12:55:10.853281898 -0600
@@ -67,6 +67,7 @@
 #include "gstomx_rrparser.h"
 #include "gstomx_videomixer.h"
 #include "gstomxbufferalloc.h"
+#include "gstrrbufferalloc.h"
 
 #include "config.h"
 
@@ -123,6 +124,7 @@
     { "swcsc",         "libOMX_Core.so",   NULL,      NULL,                   GST_RANK_NONE,      gst_swcsc_get_type },
     { "gstperf",         "libOMX_Core.so",   NULL,      NULL,                   GST_RANK_PRIMARY,      gst_perf_get_type },
     { "omxbufferalloc",         "libOMX_Core.so",   NULL,      NULL,                   GST_RANK_PRIMARY,      gst_omx_buffer_alloc_get_type },
+    { "rrbufferalloc",         "libOMX_Core.so",   NULL,      NULL,                   GST_RANK_PRIMARY,      gst_rr_buffer_alloc_get_type },
     { "omx_scaler",         "libOMX_Core.so",   "OMX.TI.VPSSM3.VFPC.INDTXSCWB",     NULL,                   GST_RANK_PRIMARY,      gst_omx_scaler_get_type },
     { "omx_mdeiscaler",         "libOMX_Core.so",   "OMX.TI.VPSSM3.VFPC.DEIMDUALOUT",     NULL,                   GST_RANK_PRIMARY,      gst_omx_mdeiscaler_get_type },
     { "omx_hdeiscaler",         "libOMX_Core.so",   "OMX.TI.VPSSM3.VFPC.DEIHDUALOUT",     NULL,                   GST_RANK_PRIMARY,      gst_omx_hdeiscaler_get_type },
Index: gst-openmax-dm81xx/src/omx/gstrrbufferalloc.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gst-openmax-dm81xx/src/omx/gstrrbufferalloc.c	2013-03-20 12:55:10.857281898 -0600
@@ -0,0 +1,449 @@
+/* GStreamer
+ *
+ * Copyright (C) 2013 RidgeRun
+ * Copyright (C) 2011 Texas Instruments, Inc - http://www.ti.com/
+ *
+ * Description: Contiguous buffer alloc element for DM81xx
+ * David Soto  <david.soto@ridgerun.com>
+ *
+ * Based on gstomxbufferalloc by prashant
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+
+#ifdef HAVE_CONFIG_H
+#  include <config.h>
+#endif
+
+#include <gst/gst.h>
+#include "gstomx.h"
+#include "gstomx_interface.h"
+#include "gstrrbufferalloc.h"
+
+/*added for tests*/
+#include <stdio.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <stdlib.h>
+#include <sys/ioctl.h>
+#include <sys/mman.h>
+#include <errno.h>
+#include <string.h>
+#include <linux/videodev2.h>
+#include <linux/fb.h>
+#include <linux/ti81xxfb.h>
+#include <linux/ti81xxhdmi.h>
+#include <linux/ti81xxvin.h>
+
+
+GST_DEBUG_CATEGORY_STATIC (gst_rr_buffer_alloc_debug);
+
+/* Filter signals and args */
+enum
+{
+  /* FILL ME */
+  LAST_SIGNAL
+};
+
+enum
+{
+  PROP_0,
+  PROP_SILENT,
+  PROP_NUMBUFFERS,
+  PROP_DEVICE
+};
+
+/* the capabilities of the inputs and outputs.
+ *
+ * describe the real formats here.
+ */
+static GstStaticPadTemplate sink_factory = GST_STATIC_PAD_TEMPLATE ("sink",
+    GST_PAD_SINK,
+    GST_PAD_ALWAYS,
+    GST_STATIC_CAPS ("ANY")
+    );
+
+static GstStaticPadTemplate src_factory = GST_STATIC_PAD_TEMPLATE ("src",
+    GST_PAD_SRC,
+    GST_PAD_ALWAYS,
+    GST_STATIC_CAPS ("ANY")
+    );
+
+GST_BOILERPLATE (GstrrBufferAlloc, gst_rr_buffer_alloc, GstElement,
+    GST_TYPE_ELEMENT);
+
+static void gst_rr_buffer_alloc_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec);
+static void gst_rr_buffer_alloc_get_property (GObject * object, guint prop_id,
+    GValue * value, GParamSpec * pspec);
+
+static gboolean gst_rr_buffer_alloc_set_caps (GstPad * pad, GstCaps * caps);
+static GstFlowReturn gst_rr_buffer_alloc_chain (GstPad * pad, GstBuffer * buf);
+
+GstFlowReturn
+gst_rr_buffer_alloc_bufferalloc (GstPad * pad, guint64 offset, guint size,
+    GstCaps * caps, GstBuffer ** buf);
+
+static GstStateChangeReturn
+gst_rr_buffer_alloc_change_state (GstElement * element,
+    GstStateChange transition);
+
+
+
+/* GObject vmethod implementations */
+
+static void
+gst_rr_buffer_alloc_base_init (gpointer gclass)
+{
+  GstElementClass *element_class = GST_ELEMENT_CLASS (gclass);
+
+  gst_element_class_set_details_simple (element_class,
+      "rrbufferalloc",
+      "Contiguous memory allocator from frameBuffer",
+      "Contiguous memory allocator from frameBuffer",
+      "David Soto <david.soto@ridgerun.com>");
+
+  gst_element_class_add_pad_template (element_class,
+      gst_static_pad_template_get (&src_factory));
+  gst_element_class_add_pad_template (element_class,
+      gst_static_pad_template_get (&sink_factory));
+}
+
+/* initialize the omxbufferalloc's class */
+static void
+gst_rr_buffer_alloc_class_init (GstrrBufferAllocClass * klass)
+{
+  GObjectClass *gobject_class;
+  GstElementClass *gstelement_class;
+
+  gobject_class = (GObjectClass *) klass;
+  gstelement_class = (GstElementClass *) klass;
+
+  gobject_class->set_property = gst_rr_buffer_alloc_set_property;
+  gobject_class->get_property = gst_rr_buffer_alloc_get_property;
+  gstelement_class->change_state = gst_rr_buffer_alloc_change_state;
+
+  g_object_class_install_property (gobject_class, PROP_NUMBUFFERS,
+      g_param_spec_uint ("numBuffers", "number of buffers",
+          "Number of buffers to be allocated by component",
+          1, 16, 10, G_PARAM_WRITABLE));
+
+  g_object_class_install_property (gobject_class, PROP_SILENT,
+      g_param_spec_boolean ("silent", "Silent", "Produce verbose output ?",
+          FALSE, G_PARAM_READWRITE));
+
+  g_object_class_install_property (gobject_class, PROP_DEVICE,
+      g_param_spec_string ("device", "FrameBuffer device",
+          "Frame buffer device to grab buffers", "/dev/fb1",
+          G_PARAM_READWRITE));
+
+}
+
+/* initialize the new element
+ * instantiate pads and add them to element
+ * set pad calback functions
+ * initialize instance structure
+ */
+static void
+gst_rr_buffer_alloc_init (GstrrBufferAlloc * filter,
+    GstrrBufferAllocClass * gclass)
+{
+  filter->sinkpad = gst_pad_new_from_static_template (&sink_factory, "sink");
+  gst_pad_set_setcaps_function (filter->sinkpad,
+      GST_DEBUG_FUNCPTR (gst_rr_buffer_alloc_set_caps));
+  gst_pad_set_getcaps_function (filter->sinkpad,
+      GST_DEBUG_FUNCPTR (gst_pad_proxy_getcaps));
+  gst_pad_set_chain_function (filter->sinkpad,
+      GST_DEBUG_FUNCPTR (gst_rr_buffer_alloc_chain));
+
+  gst_pad_set_bufferalloc_function (filter->sinkpad,
+      GST_DEBUG_FUNCPTR (gst_rr_buffer_alloc_bufferalloc));
+
+  filter->srcpad = gst_pad_new_from_static_template (&src_factory, "src");
+  gst_pad_set_getcaps_function (filter->srcpad,
+      GST_DEBUG_FUNCPTR (gst_pad_proxy_getcaps));
+
+  gst_element_add_pad (GST_ELEMENT (filter), filter->sinkpad);
+  gst_element_add_pad (GST_ELEMENT (filter), filter->srcpad);
+  filter->out_port.portptr = gst_omxportptr_new (&filter->out_port);
+  filter->silent = FALSE;
+  filter->out_port.num_buffers = 10;
+  filter->out_port.always_copy = FALSE;
+  filter->cnt = 0;
+  filter->out_port.buffers = NULL;
+  filter->deviceName = "/dev/fb1";
+}
+
+static void
+gst_rr_buffer_alloc_set_property (GObject * object, guint prop_id,
+    const GValue * value, GParamSpec * pspec)
+{
+  GstrrBufferAlloc *filter = GST_RRBUFFERALLOC (object);
+
+  switch (prop_id) {
+    case PROP_SILENT:
+      filter->silent = g_value_get_boolean (value);
+      break;
+    case PROP_NUMBUFFERS:
+      filter->out_port.num_buffers = g_value_get_uint (value);
+      break;
+    case PROP_DEVICE:
+      filter->deviceName = g_value_dup_string (value);
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
+
+static void
+gst_rr_buffer_alloc_get_property (GObject * object, guint prop_id,
+    GValue * value, GParamSpec * pspec)
+{
+  GstrrBufferAlloc *filter = GST_RRBUFFERALLOC (object);
+
+  switch (prop_id) {
+    case PROP_SILENT:
+      g_value_set_boolean (value, filter->silent);
+      break;
+    case PROP_DEVICE:
+      g_value_set_string (value, filter->deviceName);
+      break;
+    default:
+      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+      break;
+  }
+}
+
+/* GstElement vmethod implementations */
+
+/* this function handles the link with other elements */
+static gboolean
+gst_rr_buffer_alloc_set_caps (GstPad * pad, GstCaps * caps)
+{
+  GstrrBufferAlloc *filter;
+  GstPad *otherpad;
+
+  filter = GST_RRBUFFERALLOC (gst_pad_get_parent (pad));
+  otherpad = (pad == filter->srcpad) ? filter->sinkpad : filter->srcpad;
+  gst_object_unref (filter);
+
+  return gst_pad_set_caps (otherpad, caps);
+}
+
+/* chain function
+ * this function does the actual processing
+ */
+static GstFlowReturn
+gst_rr_buffer_alloc_chain (GstPad * pad, GstBuffer * buf)
+{
+  GstrrBufferAlloc *filter;
+
+  filter = GST_RRBUFFERALLOC (GST_OBJECT_PARENT (pad));
+
+  buf = gst_omxbuffertransport_clone (buf, &(filter->out_port));
+
+  /* just push out the incoming buffer without touching it */
+  return gst_pad_push (filter->srcpad, buf);
+}
+
+/* File pointer for fbdev. fbdev is only used to get buffers
+ */
+static int fbdev_fd;
+
+/* Get variable screeninfo on FBDEV */
+static int
+get_varinfo (struct fb_var_screeninfo *varinfo)
+{
+  int ret;
+
+  ret = ioctl (fbdev_fd, FBIOGET_VSCREENINFO, varinfo);
+  if (ret < 0) {
+    perror ("Error reading variable information.\n");
+    return ret;
+  }
+  return 0;
+
+}
+
+/* Get fix screeninfo on fbdev */
+static int
+get_fixinfo (struct fb_fix_screeninfo *fixinfo)
+{
+  int ret;
+  ret = ioctl (fbdev_fd, FBIOGET_FSCREENINFO, fixinfo);
+  if (ret < 0) {
+    perror ("Error reading fixed information.\n");
+    return ret;
+  }
+  return 0;
+}
+
+
+void
+gst_rr_buffer_alloc_allocate_buffers (GstrrBufferAlloc * filter, guint size)
+{
+  struct fb_fix_screeninfo fixinfo;
+  struct fb_var_screeninfo varinfo, org_varinfo;
+  int ret;
+  int buffersize;
+  int i;
+
+  /*Open FB device */
+  fbdev_fd = open (filter->deviceName, O_RDWR);
+
+  if (fbdev_fd <= 0) {
+    perror ("Could not open fb device\n");
+    return;
+  }
+  /* Get fix screen information. Fix screen information gives
+   * fix information like panning step for horizontal and vertical
+   * direction, line length, memory mapped start address and length etc.
+   */
+  if (get_fixinfo (&fixinfo)) {
+    perror ("Could not get fixed screen info\n");
+    return;
+  }
+  /* Get variable screen information. Variable screen information
+   * gives informtion like size of the image, bites per pixel,
+   * virtual size of the image etc. */
+  if (get_varinfo (&varinfo)) {
+    perror ("getting variable screen info failed\n");
+    return -1;
+  }
+  /*store the original information */
+  memcpy (&org_varinfo, &varinfo, sizeof (varinfo));
+
+  /*
+   * Set the resolution which read before again to prove the
+   * FBIOPUT_VSCREENINFO ioctl, except virtual part which is required for
+   * panning.
+   */
+  guint numBufs;
+  numBufs = filter->out_port.num_buffers;
+
+  varinfo.xres = 1920;
+  varinfo.yres = 1080;
+  varinfo.xres_virtual = varinfo.xres;
+  varinfo.yres_virtual = varinfo.yres * numBufs;
+  varinfo.bits_per_pixel = 16;
+  varinfo.transp.offset = 0;
+  varinfo.transp.length = 0;
+  varinfo.transp.msb_right = 0;
+  varinfo.red.offset = 16;
+  varinfo.red.length = 5;
+  varinfo.blue.offset = 0;
+  varinfo.blue.length = 5;
+  varinfo.green.offset = 8;
+  varinfo.green.length = 6;
+
+  ret = ioctl (fbdev_fd, FBIOPUT_VSCREENINFO, &varinfo);
+  if (ret < 0) {
+    perror ("Error writing variable information.\n");
+    return -1;
+  }
+  if (get_varinfo (&varinfo)) {
+    perror ("Error getting variable screen information\n");
+    return -1;
+  }
+  /* It is better to get fix screen information again. its because
+   * changing variable screen info may also change fix screen info. */
+  ret = ioctl (fbdev_fd, FBIOGET_FSCREENINFO, &fixinfo);
+  if (ret < 0) {
+    perror ("Error reading fixed information.\n");
+    return -1;
+  }
+
+  /* Get fix screen information. Fix screen information gives
+   * fix information like panning step for horizontal and vertical
+   * direction, line length, memory mapped start address and length etc.
+   */
+  if (get_fixinfo (&fixinfo)) {
+    perror ("Getting fixed screen info failed\n");
+    return -1;
+  }
+  /* Mmap the driver buffers in application space so that application
+   * can write on to them. Driver allocates contiguous memory for
+   * three buffers. These buffers can be displayed one by one. */
+  printf ("allocating %d buffers of size:%d!!\n", numBufs, size);
+  buffersize = fixinfo.line_length * varinfo.yres;
+
+
+  filter->out_port.buffers = g_new0 (OMX_BUFFERHEADERTYPE *, numBufs);
+
+  filter->out_port.buffers[0] = malloc (sizeof (OMX_BUFFERHEADERTYPE));
+  filter->out_port.buffers[0]->pBuffer = (unsigned char *) mmap (0,
+      buffersize * numBufs, (PROT_READ | PROT_WRITE), MAP_SHARED, fbdev_fd, 0);
+  guint ii;
+  for (ii = 1; ii < numBufs; ii++) {
+    filter->out_port.buffers[ii] = malloc (sizeof (OMX_BUFFERHEADERTYPE));
+    filter->out_port.buffers[ii]->pBuffer =
+        filter->out_port.buffers[ii - 1]->pBuffer + buffersize;
+    printf ("allocated outbuf:%p\n", filter->out_port.buffers[ii]->pBuffer);
+  }
+
+  memset (filter->out_port.buffers[0]->pBuffer, 0xFF, buffersize * numBufs);
+
+  return;
+}
+
+GstFlowReturn
+gst_rr_buffer_alloc_bufferalloc (GstPad * pad, guint64 offset, guint size,
+    GstCaps * caps, GstBuffer ** buf)
+{
+  GstrrBufferAlloc *filter;
+  filter = GST_RRBUFFERALLOC (GST_OBJECT_PARENT (pad));
+  if (filter->out_port.buffers == NULL)
+    gst_rr_buffer_alloc_allocate_buffers (filter, size);
+
+  *buf = gst_buffer_new ();
+  GST_BUFFER_DATA (*buf) = filter->out_port.buffers[filter->cnt++]->pBuffer;
+  GST_BUFFER_SIZE (*buf) = size;
+  GST_BUFFER_CAPS (*buf) = caps;
+  return;
+}
+
+static GstStateChangeReturn
+gst_rr_buffer_alloc_change_state (GstElement * element,
+    GstStateChange transition)
+{
+  GstStateChangeReturn ret = GST_STATE_CHANGE_SUCCESS;
+  GstrrBufferAlloc *filter = GST_RRBUFFERALLOC (element);
+  guint ii;
+
+  ret = GST_ELEMENT_CLASS (parent_class)->change_state (element, transition);
+
+  if (ret == GST_STATE_CHANGE_FAILURE)
+    goto leave;
+
+  switch (transition) {
+    case GST_STATE_CHANGE_PAUSED_TO_READY:
+      break;
+    case GST_STATE_CHANGE_READY_TO_NULL:
+      if (filter->out_port.buffers) {
+        close (fbdev_fd);
+        g_free (filter->out_port.buffers);
+      }
+
+      break;
+
+    default:
+      break;
+  }
+
+leave:
+  return ret;
+}
Index: gst-openmax-dm81xx/src/omx/gstrrbufferalloc.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gst-openmax-dm81xx/src/omx/gstrrbufferalloc.h	2013-03-20 12:55:10.857281898 -0600
@@ -0,0 +1,66 @@
+/* GStreamer
+ *
+ * Copyright (C) 2013 RidgeRun
+ * Copyright (C) 2011 Texas Instruments, Inc - http://www.ti.com/
+ *
+ * Description: Contiguous buffer alloc element for DM81xx
+ * David Soto  <david.soto@ridgerun.com>
+ *
+ * Based on gstomxbufferalloc by prashant
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#ifndef __GST_RRBUFFERALLOC_H__
+#define __GST_RRBUFFERALLOC_H__
+
+#include <gst/gst.h>
+#include "gstomx_util.h"
+
+G_BEGIN_DECLS
+/* #defines don't like whitespacey bits */
+#define GST_TYPE_RRBUFFERALLOC \
+  (gst_rr_buffer_alloc_get_type())
+#define GST_RRBUFFERALLOC(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_RRBUFFERALLOC,GstrrBufferAlloc))
+#define GST_RRBUFFERALLOC_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_RRBUFFERALLOC,GstrrBufferAllocClass))
+#define GST_IS_RRBUFFERALLOC(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_RRBUFFERALLOC))
+#define GST_IS_RRBUFFERALLOC_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_RRBUFFERALLOC))
+typedef struct _GstrrBufferAlloc GstrrBufferAlloc;
+typedef struct _GstrrBufferAllocClass GstrrBufferAllocClass;
+
+struct _GstrrBufferAlloc
+{
+  GstElement element;
+  GstPad *sinkpad, *srcpad;
+  gboolean silent;
+  GOmxPort out_port;
+  guint cnt;
+  guint allocSize;
+  gchar *deviceName;
+};
+
+struct _GstrrBufferAllocClass
+{
+  GstElementClass parent_class;
+};
+
+GType gst_rr_buffer_alloc_get_type (void);
+
+G_END_DECLS
+#endif /* __GST_RRBUFFERALLOC_H__ */
