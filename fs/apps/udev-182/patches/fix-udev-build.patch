Index: udev-182/src/src/libudev-monitor.c
===================================================================
--- udev-182.orig/src/src/libudev-monitor.c	2013-10-10 15:10:13.407406319 -0600
+++ udev-182/src/src/libudev-monitor.c	2013-10-11 08:40:10.103834603 -0600
@@ -13,6 +13,7 @@
 #include <stdlib.h>
 #include <stddef.h>
 #include <unistd.h>
+#include <fcntl.h>
 #include <errno.h>
 #include <string.h>
 #include <dirent.h>
@@ -150,12 +151,13 @@
                 util_strscpy(&udev_monitor->sun.sun_path[1], sizeof(udev_monitor->sun.sun_path)-1, socket_path);
                 udev_monitor->addrlen = offsetof(struct sockaddr_un, sun_path) + strlen(socket_path)+1;
         }
-        udev_monitor->sock = socket(AF_LOCAL, SOCK_DGRAM|SOCK_NONBLOCK|SOCK_CLOEXEC, 0);
+        udev_monitor->sock = socket(AF_LOCAL, SOCK_DGRAM, 0);
         if (udev_monitor->sock == -1) {
                 err(udev, "error getting socket: %m\n");
                 free(udev_monitor);
                 return NULL;
         }
+        tweak_descriptor(udev_monitor->sock, FD_CLOEXEC, O_NONBLOCK);
 
         dbg(udev, "monitor %p created with '%s'\n", udev_monitor, socket_path);
         return udev_monitor;
@@ -183,12 +185,13 @@
                 return NULL;
 
         if (fd < 0) {
-                udev_monitor->sock = socket(PF_NETLINK, SOCK_RAW|SOCK_CLOEXEC|SOCK_NONBLOCK, NETLINK_KOBJECT_UEVENT);
+                udev_monitor->sock = socket(PF_NETLINK, SOCK_RAW, NETLINK_KOBJECT_UEVENT);
                 if (udev_monitor->sock == -1) {
                         err(udev, "error getting socket: %m\n");
                         free(udev_monitor);
                         return NULL;
                 }
+                tweak_descriptor(udev_monitor->sock, FD_CLOEXEC, O_NONBLOCK);
         } else {
                 udev_monitor->bound = true;
                 udev_monitor->sock = fd;
Index: udev-182/src/src/udev-event.c
===================================================================
--- udev-182.orig/src/src/udev-event.c	2013-10-10 15:10:13.419406318 -0600
+++ udev-182/src/src/udev-event.c	2013-10-11 08:40:10.103834603 -0600
@@ -467,11 +467,12 @@
         if (fd_stdout < 0 && fd_stderr < 0)
                 return;
 
-        fd_ep = epoll_create1(EPOLL_CLOEXEC);
+        fd_ep = epoll_create(16);
         if (fd_ep < 0) {
                 err(udev, "error creating epoll fd: %m\n");
                 goto out;
         }
+        tweak_descriptor(fd_ep, FD_CLOEXEC, 0);
 
         if (fd_stdout >= 0) {
                 memset(&ep_outpipe, 0, sizeof(struct epoll_event));
@@ -711,18 +712,22 @@
 
         /* pipes from child to parent */
         if (result != NULL || udev_get_log_priority(udev) >= LOG_INFO) {
-                if (pipe2(outpipe, O_NONBLOCK) != 0) {
+                if (pipe(outpipe) != 0) {
                         err = -errno;
                         err(udev, "pipe failed: %m\n");
                         goto out;
                 }
+                tweak_descriptor(outpipe[0], 0, O_NONBLOCK);
+                tweak_descriptor(outpipe[1], 0, O_NONBLOCK);
         }
         if (udev_get_log_priority(udev) >= LOG_INFO) {
-                if (pipe2(errpipe, O_NONBLOCK) != 0) {
+                if (pipe(errpipe) != 0) {
                         err = -errno;
                         err(udev, "pipe failed: %m\n");
                         goto out;
                 }
+                tweak_descriptor(errpipe[0], 0, O_NONBLOCK);
+                tweak_descriptor(errpipe[1], 0, O_NONBLOCK);
         }
 
         /* allow programs in /usr/lib/udev/ to be called without the path */
Index: udev-182/src/src/libudev-private.h
===================================================================
--- udev-182.orig/src/src/libudev-private.h	2013-10-10 15:10:13.315406318 -0600
+++ udev-182/src/src/libudev-private.h	2013-10-11 08:40:10.115834603 -0600
@@ -12,6 +12,8 @@
 #ifndef _LIBUDEV_PRIVATE_H_
 #define _LIBUDEV_PRIVATE_H_
 
+#include <unistd.h>
+#include <fcntl.h>
 #include <syslog.h>
 #include <signal.h>
 #include <stdint.h>
@@ -210,4 +212,6 @@
 void udev_selinux_resetfscreatecon(struct udev *udev);
 #endif
 
+int tweak_descriptor(int fd, int descFlags2Add, int statusFlags2Add);
+
 #endif
Index: udev-182/src/src/udev-builtin-input_id.c
===================================================================
--- udev-182.orig/src/src/udev-builtin-input_id.c	2013-10-10 15:10:13.351406318 -0600
+++ udev-182/src/src/udev-builtin-input_id.c	2013-10-11 08:40:10.123834603 -0600
@@ -162,7 +162,7 @@
         }
         /* If there are no keys in the lower block, check the higher block */
         if (!found) {
-                for (i = KEY_OK; i < BTN_TRIGGER_HAPPY; ++i) {
+                for (i = KEY_OK; i <= BTN_GEAR_UP; ++i) {
                         if (test_bit (i, bitmask_key)) {
                                 info(udev, "test_key: Found key %x in high block\n", i);
                                 found = 1;
Index: udev-182/src/src/udev-ctrl.c
===================================================================
--- udev-182.orig/src/src/udev-ctrl.c	2013-10-10 15:10:13.451406319 -0600
+++ udev-182/src/src/udev-ctrl.c	2013-10-11 08:40:10.131834603 -0600
@@ -81,12 +81,13 @@
         uctrl->udev = udev;
 
         if (fd < 0) {
-                uctrl->sock = socket(AF_LOCAL, SOCK_SEQPACKET|SOCK_NONBLOCK|SOCK_CLOEXEC, 0);
+                uctrl->sock = socket(AF_LOCAL, SOCK_SEQPACKET, 0);
                 if (uctrl->sock < 0) {
                         err(udev, "error getting socket: %m\n");
                         udev_ctrl_unref(uctrl);
                         return NULL;
                 }
+                tweak_descriptor(uctrl->sock, FD_CLOEXEC, O_NONBLOCK);
         } else {
                 uctrl->bound = true;
                 uctrl->sock = fd;
@@ -189,12 +190,13 @@
         conn->refcount = 1;
         conn->uctrl = uctrl;
 
-        conn->sock = accept4(uctrl->sock, NULL, NULL, SOCK_CLOEXEC|SOCK_NONBLOCK);
+        conn->sock = accept(uctrl->sock, NULL, NULL);
         if (conn->sock < 0) {
                 if (errno != EINTR)
                         err(uctrl->udev, "unable to receive ctrl connection: %m\n");
                 goto err;
         }
+        tweak_descriptor(conn->sock, FD_CLOEXEC, O_NONBLOCK);
 
         /* check peer credential of connection */
         slen = sizeof(ucred);
Index: udev-182/src/src/udev-watch.c
===================================================================
--- udev-182.orig/src/src/udev-watch.c	2013-10-10 15:10:13.327406318 -0600
+++ udev-182/src/src/udev-watch.c	2013-10-11 08:40:10.139834603 -0600
@@ -38,9 +38,10 @@
  */
 int udev_watch_init(struct udev *udev)
 {
-        inotify_fd = inotify_init1(IN_CLOEXEC);
+        inotify_fd = inotify_init();
         if (inotify_fd < 0)
                 err(udev, "inotify_init failed: %m\n");
+        tweak_descriptor(inotify_fd, FD_CLOEXEC, 0);
         return inotify_fd;
 }
 
Index: udev-182/src/src/udevadm-monitor.c
===================================================================
--- udev-182.orig/src/src/udevadm-monitor.c	2013-10-10 15:10:13.395406317 -0600
+++ udev-182/src/src/udevadm-monitor.c	2013-10-11 08:40:10.147834603 -0600
@@ -160,11 +160,12 @@
         sigaddset(&mask, SIGTERM);
         sigprocmask(SIG_UNBLOCK, &mask, NULL);
 
-        fd_ep = epoll_create1(EPOLL_CLOEXEC);
+        fd_ep = epoll_create(16);
         if (fd_ep < 0) {
                 err(udev, "error creating epoll fd: %m\n");
                 goto out;
         }
+        tweak_descriptor(fd_ep, FD_CLOEXEC, 0);
 
         printf("monitor will print the received events for:\n");
         if (print_udev) {
Index: udev-182/src/src/udevadm-settle.c
===================================================================
--- udev-182.orig/src/src/udevadm-settle.c	2013-10-10 15:10:13.339406318 -0600
+++ udev-182/src/src/udevadm-settle.c	2013-10-11 08:40:10.155834603 -0600
@@ -151,10 +151,11 @@
         }
 
         pfd[0].events = POLLIN;
-        pfd[0].fd = inotify_init1(IN_CLOEXEC);
+        pfd[0].fd = inotify_init();
         if (pfd[0].fd < 0) {
                 err(udev, "inotify_init failed: %m\n");
         } else {
+                tweak_descriptor(pfd[0].fd, FD_CLOEXEC, 0);
                 if (inotify_add_watch(pfd[0].fd, udev_get_run_path(udev), IN_MOVED_TO) < 0) {
                         err(udev, "watching '%s' failed\n", udev_get_run_path(udev));
                         close(pfd[0].fd);
Index: udev-182/src/src/udevadm-test.c
===================================================================
--- udev-182.orig/src/src/udevadm-test.c	2013-10-10 15:10:13.387406319 -0600
+++ udev-182/src/src/udevadm-test.c	2013-10-11 08:40:10.163834603 -0600
@@ -135,12 +135,13 @@
 
         sigfillset(&mask);
         sigprocmask(SIG_SETMASK, &mask, &sigmask_orig);
-        event->fd_signal = signalfd(-1, &mask, SFD_NONBLOCK|SFD_CLOEXEC);
+        event->fd_signal = signalfd(-1, &mask, 0);
         if (event->fd_signal < 0) {
                 fprintf(stderr, "error creating signalfd\n");
                 rc = 5;
                 goto out;
         }
+        tweak_descriptor(event->fd_signal, FD_CLOEXEC, O_NONBLOCK);
 
         err = udev_event_execute_rules(event, rules, &sigmask_orig);
 
Index: udev-182/src/src/udevd.c
===================================================================
--- udev-182.orig/src/src/udevd.c	2013-10-10 15:10:13.375406317 -0600
+++ udev-182/src/src/udevd.c	2013-10-11 08:40:10.191834603 -0600
@@ -245,19 +245,21 @@
                 close(worker_watch[READ_END]);
 
                 sigfillset(&mask);
-                fd_signal = signalfd(-1, &mask, SFD_NONBLOCK|SFD_CLOEXEC);
+                fd_signal = signalfd(-1, &mask, 0);
                 if (fd_signal < 0) {
                         err(udev, "error creating signalfd %m\n");
                         rc = 2;
                         goto out;
                 }
+                tweak_descriptor(fd_signal, FD_CLOEXEC, O_NONBLOCK);
 
-                fd_ep = epoll_create1(EPOLL_CLOEXEC);
+                fd_ep = epoll_create(16);
                 if (fd_ep < 0) {
                         err(udev, "error creating epoll fd: %m\n");
                         rc = 3;
                         goto out;
                 }
+                tweak_descriptor(fd_ep, FD_CLOEXEC, 0);
 
                 memset(&ep_signal, 0, sizeof(struct epoll_event));
                 ep_signal.events = EPOLLIN;
@@ -1468,21 +1470,24 @@
         /* block and listen to all signals on signalfd */
         sigfillset(&mask);
         sigprocmask(SIG_SETMASK, &mask, &sigmask_orig);
-        fd_signal = signalfd(-1, &mask, SFD_NONBLOCK|SFD_CLOEXEC);
+        fd_signal = signalfd(-1, &mask, 0);
         if (fd_signal < 0) {
                 fprintf(stderr, "error creating signalfd\n");
                 err(udev, "error creating signalfd\n");
                 rc = 5;
                 goto exit;
         }
+        tweak_descriptor(fd_signal, FD_CLOEXEC, O_NONBLOCK);
 
         /* unnamed socket from workers to the main daemon */
-        if (socketpair(AF_LOCAL, SOCK_DGRAM|SOCK_CLOEXEC, 0, worker_watch) < 0) {
+        if (socketpair(AF_LOCAL, SOCK_DGRAM, 0, worker_watch) < 0) {
                 fprintf(stderr, "error creating socketpair\n");
                 err(udev, "error creating socketpair\n");
                 rc = 6;
                 goto exit;
         }
+        tweak_descriptor(worker_watch[0], FD_CLOEXEC, 0);
+        tweak_descriptor(worker_watch[1], FD_CLOEXEC, 0);
         fd_worker = worker_watch[READ_END];
 
         udev_builtin_init(udev);
@@ -1513,11 +1518,12 @@
         ep_worker.events = EPOLLIN;
         ep_worker.data.fd = fd_worker;
 
-        fd_ep = epoll_create1(EPOLL_CLOEXEC);
+        fd_ep = epoll_create(16);
         if (fd_ep < 0) {
                 err(udev, "error creating epoll fd: %m\n");
                 goto exit;
         }
+        tweak_descriptor(fd_ep, FD_CLOEXEC, 0);
         if (epoll_ctl(fd_ep, EPOLL_CTL_ADD, fd_ctrl, &ep_ctrl) < 0 ||
             epoll_ctl(fd_ep, EPOLL_CTL_ADD, fd_inotify, &ep_inotify) < 0 ||
             epoll_ctl(fd_ep, EPOLL_CTL_ADD, fd_signal, &ep_signal) < 0 ||
@@ -1615,7 +1621,7 @@
                                         continue;
 
                                 if ((now_usec() - worker->event_start_usec) > 30 * 1000 * 1000) {
-                                        err(udev, "worker [%u] timeout, kill it\n", worker->pid,
+                                        err(udev, "worker [%u] timeout, kill it: %s\n", worker->pid,
                                             worker->event ? worker->event->devpath : "<idle>");
                                         kill(worker->pid, SIGKILL);
                                         worker->state = WORKER_KILLED;
Index: udev-182/src/src/libudev.c
===================================================================
--- udev-182.orig/src/src/libudev.c	2013-10-10 15:10:13.363406318 -0600
+++ udev-182/src/src/libudev.c	2013-10-11 08:40:10.199834604 -0600
@@ -455,3 +455,23 @@
 {
         return udev_list_get_entry(&udev->properties_list);
 }
+
+int tweak_descriptor(int fd, int descFlags2Add, int statusFlags2Add)
+{
+        int flags;
+        if (descFlags2Add) {
+                flags = fcntl(fd, F_GETFD);
+                flags |= descFlags2Add;
+                if (-1 == fcntl(fd, F_SETFD, flags)) {
+                        return -1;
+                }
+        }
+        if (statusFlags2Add) {
+                flags = fcntl(fd, F_GETFL);
+                flags |= statusFlags2Add;
+                if (-1 == fcntl(fd, F_SETFL, flags)) {
+                        return -1;
+                }
+        }
+        return 0;
+}
Index: udev-182/src/src/sd-daemon.c
===================================================================
--- udev-182.orig/src/src/sd-daemon.c	2012-02-14 07:44:10.391187515 -0600
+++ udev-182/src/src/sd-daemon.c	2013-10-11 08:46:01.255836429 -0600
@@ -382,7 +382,7 @@
         return 1;
 }
 
-_sd_export_ int sd_is_mq(int fd, const char *path) {
+/*_sd_export_ int sd_is_mq(int fd, const char *path) {
 #if !defined(__linux__)
         return 0;
 #else
@@ -417,7 +417,7 @@
 
         return 1;
 #endif
-}
+}*/
 
 _sd_export_ int sd_notify(int unset_environment, const char *state) {
 #if defined(DISABLE_SYSTEMD) || !defined(__linux__) || !defined(SOCK_CLOEXEC)
Index: udev-182/src/src/sd-daemon.h
===================================================================
--- udev-182.orig/src/src/sd-daemon.h	2012-02-14 07:44:19.638194109 -0600
+++ udev-182/src/src/sd-daemon.h	2013-10-11 08:46:29.739836577 -0600
@@ -187,7 +187,7 @@
   0 otherwise. If path is NULL a message queue name check is not
   done. Returns a negative errno style error code on failure.
 */
-int sd_is_mq(int fd, const char *path);
+//int sd_is_mq(int fd, const char *path);
 
 /*
   Informs systemd about changed daemon state. This takes a number of
